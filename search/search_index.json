{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the WSO2 Open Health Care Documentation! API-driven interoperability, seamless and secure health data exchange, and health data transformation with prebuilt Fast Healthcare Interoperability Resources (FHIR\u00ae) accelerators for rapid implementation by meeting regulatory compliance requirements. Get a head start with our Quick Start Guide or dive straight into the documentation to understand what we offer and to discover the extensibility. timer Quick Start Guide Set up and try out in your local environment timer Quick Start Guide Set up and try out in your local environment timer Quick Start Guide Set up and try out in your local environment timer Quick Start Guide Set up and try out in your local environment timer Quick Start Guide Set up and try out in your local environment timer Quick Start Guide Set up and try out in your local environment timer Quick Start Guide Set up and try out in your local environment","title":"Home"},{"location":"guides-overview/","text":"Guides - Overview \u00b6","title":"Overview"},{"location":"guides-overview/#guides-overview","text":"","title":"Guides - Overview"},{"location":"page-not-found/","text":"Page not found \u00b6 Sorry, but the page you are looking for does not exist, has been removed, renamed, or is temporarily unavailable. Try one of the navigation links above or use the search engine in the top right corner. Alternatively, you can also report an issue here .","title":""},{"location":"page-not-found/#page-not-found","text":"Sorry, but the page you are looking for does not exist, has been removed, renamed, or is temporarily unavailable. Try one of the navigation links above or use the search engine in the top right corner. Alternatively, you can also report an issue here .","title":"Page not found"},{"location":"references-overview/","text":"References - Overview \u00b6","title":"Overview"},{"location":"references-overview/#references-overview","text":"","title":"References - Overview"},{"location":"set-up-wso2-integration-studio/","text":"","title":"Set up WSO2 Integration Studio"},{"location":"smart-specification/","text":"SMART app specification \u00b6","title":"SMART specification"},{"location":"smart-specification/#smart-app-specification","text":"","title":"SMART app specification"},{"location":"concepts/accelerators/","text":"Accelerators \u00b6","title":"Accelerators"},{"location":"concepts/accelerators/#accelerators","text":"","title":"Accelerators"},{"location":"concepts/data-mappers/","text":"Mappers \u00b6","title":"Mappers"},{"location":"concepts/data-mappers/#mappers","text":"","title":"Mappers"},{"location":"connectors/hc-systems/","text":"HC Systems \u00b6","title":"HC Systems"},{"location":"connectors/hc-systems/#hc-systems","text":"","title":"HC Systems"},{"location":"connectors/open-healthcare-connectors/","text":"WSO2 Open Healthcare connectors \u00b6","title":"Overview"},{"location":"connectors/open-healthcare-connectors/#wso2-open-healthcare-connectors","text":"","title":"WSO2 Open Healthcare connectors"},{"location":"fhir/guides/build-the-integration-logic/","text":"Build the integration logic \u00b6","title":"Build the integration logic"},{"location":"fhir/guides/build-the-integration-logic/#build-the-integration-logic","text":"","title":"Build the integration logic"},{"location":"fhir/guides/expose-fhir-apis/","text":"Expose FHIR APIs \u00b6 Overview \u00b6 WSO2 Open Healthcare is a platform designed with API-driven interoperability, seamless and secure health data exchange capabilities. Industry standard API gateway with readily available API Management capabilities provides a vast set of features that can be leveraged to spin up a fully functioning FHIR server in a short period of time. With WSO2 Open Healthcare, you can easily, Develop a fully standardized FHIR server with pre-built FHIR API definitions. 100+ OAS definition files are available in WSO2 FHIR API Hub. Readily available across different Implementation Guides. Rapid development tools to support any Implementation guide. Expose existing FHIR APIs in a dedicated API marketplace (aka Developer Portal). Build custom integration flows to transform legacy data formats into FHIR resources and expose them as FHIR APIs. Allow 3 rd party developers to consume FHIR APIs through the Developer Portal. WSO2 Open Healthcare solution consists of an API Management component which has been developed using WSO2 API Manager as the base product and installing Healthcare related modules via the Open Healthcare APIM accelerator distribution. This section discusses the basic steps and the key concepts of FHIR APIs in the WSO2 Open Healthcare. Prerequisites \u00b6 Install and setup WSO2 Open Healthcare solution. [link to QSG] Deployed Integration API/s. To see the response payloads Expose the integration as a FHIR API \u00b6 WSO2 Open Healthcare allows you to expose an existing FHIR integration service as a managed FHIR REST API. If you have already built your FHIR integration service, you can follow the steps given below to expose it as a managed API in a standard FHIR server. Download the relevant API definition(OAS) from the WSO2 FHIR API Hub. Log in to WSO2 OH Publisher portal and select REST API Create an API by clicking Import Open API and uploading the OAS file(both JSON and YAML format are supported.) Verify the basic information and enter the endpoint URL for the existing FHIR Integration API. Click the Create button and configure the API. Select business plan so that API subscribers can subscribe to. Configure a target gateway and deploy the API Publish the API so that App developers can subscribe and consume the API from the Developer Portal. Explore the FHIR API \u00b6 WSO2 Open Healthcare offers you a generalized FHIR server setup so that you can interact with FHIR client applications. Server implementation is carried through while referring to the FHIR Http developer guide and hence incorporates all the mandatory capabilities for the product. Please note that there are areas that WSO2 Open Healthcare does not support at the moment. A summary of supported FHIR RESTful features can be found here . Once the required FHIR resources have been exposed as FHIR APIs, the server is ready to go as a standard FHIR server. That is, all the subordinate components are getting updated and deployed accordingly. To learn more about RESTful FHIR, refer the official FHIR documentation . Interactions Instance level - All the instance level interactions are pre templeted in the API definitions of the WSO2 FHIR API Hub. Relevant backend integration logic has to be implemented by the developer. (A project skeleton with boilerplate code will be provided to speed up the deployment.) Type level - Type level interactions are also handled in a similar manner as in Instance level interactions. System level - Only Capabilities interaction is available as a default feature. Capability statement This document describes the server's meta information so that the stakeholders can query and decide whether the server supports expected operation/interaction. This includes all the implemented FHIR resource APIs, search parameters of each FHIR resource, supported interactions and expected payload structures etc. WSO2 Open Healthcare comes with a pre-deployed, open to public endpoint that serves the server's Capability Statement which gets updated real time with the changes being made within the server. Users can execute a query as follows to retrieve the server's Capability Statement. GET [gateway_base_url]/metadata SMART endpoints WSO2 Open Healthcare also adheres to the SMART on FHIR guidelines where the 3 rd party entities can authenticate with the server and exchange data. As per the specification, a JSON document will be returned upon querying the well-known/smart-configuration endpoint. This contains all the necessary information related to SMART on FHIR specification including OAuth endpoint details and other OAuth related information. This is also available as a default feature which will be served in the following URL. GET [gateway_base_url]/.well-known/smart-configuration Summary of Supported FHIR RESTful Capabilities \u00b6 Feature Supported? (yes/no/partially) Description read yes Supports query parameters as well vread yes Appropriate Integration logic has to be implemented by the Integration developer. (Since versioning strategy might different from one system to a another) update yes Appropriate Integration logic has to be implemented by the Integration developer. patch yes Appropriate Integration logic has to be implemented by the Integration developer. delete yes create yes search yes All the relevant search parameters of a particular FHIR resource will be populated in the provided API definition. capabilities yes This interaction will be shipped as a default feature. This is available in the product and can be used without any configurations. batch/transaction yes The support for batch operation is currently coupled with WSO2 OH FHIR Repository feature. \\<link> history yes Appropriate Integration logic has to be implemented by the Integration developer. Transaction integrity no Support for transaction integrity can be implemented by integration developers in the integration layer but currently the server conformance is not capable of capturing that. paging yes Appropriate Integration logic has to be implemented by the Integration developer. A guided skeleton will be provided. Support for HEAD no Currently not implemented. Will respond with 405 \"method not allowed\" Custom Headers yes WSO2 OH does not use any custom headers for internal purposes Conditional create/update/delete no Since the FHIR R4B has not finalized the behavior of conditional interactions, WSO2 OH does not implement the feature.","title":"Expose FHIR APIs"},{"location":"fhir/guides/expose-fhir-apis/#expose-fhir-apis","text":"","title":"Expose FHIR APIs"},{"location":"fhir/guides/expose-fhir-apis/#overview","text":"WSO2 Open Healthcare is a platform designed with API-driven interoperability, seamless and secure health data exchange capabilities. Industry standard API gateway with readily available API Management capabilities provides a vast set of features that can be leveraged to spin up a fully functioning FHIR server in a short period of time. With WSO2 Open Healthcare, you can easily, Develop a fully standardized FHIR server with pre-built FHIR API definitions. 100+ OAS definition files are available in WSO2 FHIR API Hub. Readily available across different Implementation Guides. Rapid development tools to support any Implementation guide. Expose existing FHIR APIs in a dedicated API marketplace (aka Developer Portal). Build custom integration flows to transform legacy data formats into FHIR resources and expose them as FHIR APIs. Allow 3 rd party developers to consume FHIR APIs through the Developer Portal. WSO2 Open Healthcare solution consists of an API Management component which has been developed using WSO2 API Manager as the base product and installing Healthcare related modules via the Open Healthcare APIM accelerator distribution. This section discusses the basic steps and the key concepts of FHIR APIs in the WSO2 Open Healthcare.","title":"Overview"},{"location":"fhir/guides/expose-fhir-apis/#prerequisites","text":"Install and setup WSO2 Open Healthcare solution. [link to QSG] Deployed Integration API/s. To see the response payloads","title":"Prerequisites"},{"location":"fhir/guides/expose-fhir-apis/#expose-the-integration-as-a-fhir-api","text":"WSO2 Open Healthcare allows you to expose an existing FHIR integration service as a managed FHIR REST API. If you have already built your FHIR integration service, you can follow the steps given below to expose it as a managed API in a standard FHIR server. Download the relevant API definition(OAS) from the WSO2 FHIR API Hub. Log in to WSO2 OH Publisher portal and select REST API Create an API by clicking Import Open API and uploading the OAS file(both JSON and YAML format are supported.) Verify the basic information and enter the endpoint URL for the existing FHIR Integration API. Click the Create button and configure the API. Select business plan so that API subscribers can subscribe to. Configure a target gateway and deploy the API Publish the API so that App developers can subscribe and consume the API from the Developer Portal.","title":"Expose the integration as a FHIR API"},{"location":"fhir/guides/expose-fhir-apis/#explore-the-fhir-api","text":"WSO2 Open Healthcare offers you a generalized FHIR server setup so that you can interact with FHIR client applications. Server implementation is carried through while referring to the FHIR Http developer guide and hence incorporates all the mandatory capabilities for the product. Please note that there are areas that WSO2 Open Healthcare does not support at the moment. A summary of supported FHIR RESTful features can be found here . Once the required FHIR resources have been exposed as FHIR APIs, the server is ready to go as a standard FHIR server. That is, all the subordinate components are getting updated and deployed accordingly. To learn more about RESTful FHIR, refer the official FHIR documentation . Interactions Instance level - All the instance level interactions are pre templeted in the API definitions of the WSO2 FHIR API Hub. Relevant backend integration logic has to be implemented by the developer. (A project skeleton with boilerplate code will be provided to speed up the deployment.) Type level - Type level interactions are also handled in a similar manner as in Instance level interactions. System level - Only Capabilities interaction is available as a default feature. Capability statement This document describes the server's meta information so that the stakeholders can query and decide whether the server supports expected operation/interaction. This includes all the implemented FHIR resource APIs, search parameters of each FHIR resource, supported interactions and expected payload structures etc. WSO2 Open Healthcare comes with a pre-deployed, open to public endpoint that serves the server's Capability Statement which gets updated real time with the changes being made within the server. Users can execute a query as follows to retrieve the server's Capability Statement. GET [gateway_base_url]/metadata SMART endpoints WSO2 Open Healthcare also adheres to the SMART on FHIR guidelines where the 3 rd party entities can authenticate with the server and exchange data. As per the specification, a JSON document will be returned upon querying the well-known/smart-configuration endpoint. This contains all the necessary information related to SMART on FHIR specification including OAuth endpoint details and other OAuth related information. This is also available as a default feature which will be served in the following URL. GET [gateway_base_url]/.well-known/smart-configuration","title":"Explore the FHIR API"},{"location":"fhir/guides/expose-fhir-apis/#summary-of-supported-fhir-restful-capabilities","text":"Feature Supported? (yes/no/partially) Description read yes Supports query parameters as well vread yes Appropriate Integration logic has to be implemented by the Integration developer. (Since versioning strategy might different from one system to a another) update yes Appropriate Integration logic has to be implemented by the Integration developer. patch yes Appropriate Integration logic has to be implemented by the Integration developer. delete yes create yes search yes All the relevant search parameters of a particular FHIR resource will be populated in the provided API definition. capabilities yes This interaction will be shipped as a default feature. This is available in the product and can be used without any configurations. batch/transaction yes The support for batch operation is currently coupled with WSO2 OH FHIR Repository feature. \\<link> history yes Appropriate Integration logic has to be implemented by the Integration developer. Transaction integrity no Support for transaction integrity can be implemented by integration developers in the integration layer but currently the server conformance is not capable of capturing that. paging yes Appropriate Integration logic has to be implemented by the Integration developer. A guided skeleton will be provided. Support for HEAD no Currently not implemented. Will respond with 405 \"method not allowed\" Custom Headers yes WSO2 OH does not use any custom headers for internal purposes Conditional create/update/delete no Since the FHIR R4B has not finalized the behavior of conditional interactions, WSO2 OH does not implement the feature.","title":"Summary of Supported FHIR RESTful Capabilities"},{"location":"fhir/guides/fhir-guides-overview/","text":"Working with FHIR - Overview \u00b6","title":"Overview"},{"location":"fhir/guides/fhir-guides-overview/#working-with-fhir-overview","text":"","title":"Working with FHIR - Overview"},{"location":"fhir/guides/manage-fhir-api-access/","text":"Manage access to FHIR APIs \u00b6","title":"Manage FHIR API access"},{"location":"fhir/guides/manage-fhir-api-access/#manage-access-to-fhir-apis","text":"","title":"Manage access to FHIR APIs"},{"location":"fhir/guides/secure-fhir-apis/","text":"Consume FHIR APIs \u00b6","title":"Secure FHIR APIs"},{"location":"fhir/guides/secure-fhir-apis/#consume-fhir-apis","text":"","title":"Consume FHIR APIs"},{"location":"fhir/guides/use-fhir-apis/","text":"Use FHIR APIs \u00b6","title":"Use FHIR APIs"},{"location":"fhir/guides/use-fhir-apis/#use-fhir-apis","text":"","title":"Use FHIR APIs"},{"location":"fhir/references/fhir-mapping-templates-example/","text":"Example \u00b6 Coverting XML payload to C4BB Patient Example using FHIR Read Mapping Templates \u00b6 This example will guide you to convert an XML Payload to CRBB-Patient profile. What you will build \u00b6 You will have an XML payload as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <patientCollection> <patient> <id>285137</id> <ethnicity__pc>Unknown</ethnicity__pc> <gender__pc>FEMALe</gender__pc> <lastname>OVERKAMP</lastname> <personbirthdate>1987-11-03+05:30</personbirthdate> <firstname>JUSTIN</firstname> <phone>(062) 8377233</phone> <language__c>English</language__c> <billingcountrycode>US</billingcountrycode> <personmailingpostalcode>344532</personmailingpostalcode> <personmailingstate>NY</personmailingstate> <personmailingcity>New York</personmailingcity> <personmailingstreet>1150 476 Co Rd</personmailingstreet> </patient> </patientCollection> This will be converted to an FHIR payload using FHIR Mappings. The final FHIR Payload (CRBB Patient ) will be as below. { \"resourceType\": \"Bundle\", \"meta\": { \"lastUpdated\": \"2022-05-24T23:42:32.221+00:00\" }, \"type\": \"searchset\", \"total\": 1, \"entry\": [ { \"resource\": { \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"extension\": [ { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\", \"extension\": [ { \"url\": \"text\", \"valueString\": \"Unknown\" } ] }, { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\", \"valueString\": \"F\" } ], \"identifier\": [ { \"type\": { \"coding\": [ { \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"MB\", \"display\": \"Member Number\" } ] }, \"value\": \"285137\" } ], \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ], \"telecom\": [ { \"system\": \"phone\", \"value\": \"(062) 8377233\" } ], \"gender\": \"female\", \"birthDate\": \"1987-11-03\", \"address\": [ { \"type\": \"physical\", \"line\": [ \"1150 476 Co Rd\" ], \"city\": \"New York\", \"state\": \"NY\", \"postalCode\": \"344532\", \"country\": \"US\" } ], \"communication\": [ { \"language\": { \"coding\": [ { \"system\": \"urn:ietf:bcp:47\", \"code\": \"en\" } ] } } ] } } ] } Setting up the environment \u00b6 Import Projects \u00b6 The user will be provided two project zip files, which are projectsGenerationTool_sampleclient_api.zip file and projectsGenerationTool_sampleclient_integration.zip file. These need to be imported to WSO2 Integration Studio Unzip the two projects. Please follow the steps to import the projects to the Integration Studio. Import-Projects Prerequsites \u00b6 Create the endpoint. Right click on the sampleclient_integration project, and select, 'New' -> 'Endpoint'. The XML payload is already available. Create the following endpoint. Make sure to create the endpoint name as 'uri.var.endpoint'. We do this as we need to call the endpoint as a query parameter. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <endpoint name=\"uri.var.endpoint\" xmlns=\"http://ws.apache.org/ns/synapse\"> <http method=\"get\" uri-template=\"{uri.var.endpoint}\"> <suspendOnFailure> <initialDuration>-1</initialDuration> <progressionFactor>1.0</progressionFactor> </suspendOnFailure> <markForSuspension> <retriesBeforeSuspension>0</retriesBeforeSuspension> </markForSuspension> </http> </endpoint> Step 1:Implement source system connection logic for the relevant FHIR API \u00b6 This can be found under the templates section of the synapse-configs of the source integration project which ends with sourceConnect_template suffix. In this example, it is sampleclient_C4BB_C4BBPatient_search_sourceConnect_template.xml In this step we can provide the endpoint we created in Prerequsites using a call mediator. The source will be as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_C4BB_C4BBPatient_search_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <parameter defaultValue=\"\" isMandatory=\"false\" name=\"id\"/> <sequence> <property expression=\"get-property('query.param.endpoint')\" name=\"uri.var.endpoint\" scope=\"default\" type=\"STRING\"/> <call> <endpoint key=\"uri.var.endpoint\"/> </call> </sequence> </template> Step 2: Implement the FHIR Mappings \u00b6 After having the source payload from backend sources, then you can implement the FHIR mappings. Go to the Source integration project and open the registry resources project. There are three types of templates which are in yaml format. Resource Mapping templates Key Value Mapping template file (keymappings.yaml) Conditions mapping template file (conditions.yaml) Resource templates Developer only needs to fill the relevant source value from the source payload using relevant Xpath or a JsonPath. In this example c4bb-patient.yaml file. We need to provide the following Xpaths according to the example. Path to source payload root element sourcePayloadRoot : read: //patientCollection/patient write: Relative path to source payload child data elements - source : read : //id write : Part of crbb-patient.yml file is as below. Like wise you can fill the mappings. resourceType : Patient profile : http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient sourcePayloadRoot : read: //patientCollection/patient write: elements: - source : read : //id write : fhir : attribute : Patient.id dataType: id Key Value Mapping Template The Key Value Mapping template file is used to resolve the source system values with the FHIR specific values for resource fields. For example in the FHIR Patient resource, the gender field should only have standard values defined by the FHIR specification which are \u2018male\u2019 for Male, \u2018female\u2019 for Female. In source systems, these kinds of data may have a different representation. In such cases we can use the Key Value Mapping template to map the source system representation to the standard FHIR representation. In this example, in the given XML payload, you can see that the gender is represented as FEMALe, which is not a value that FHIR system accepts. <gender__pc>FEMALe</gender__pc> Therefore, we need a mapping for this. Open 'keymappings.yaml'file and do the mapping as below. - name: administrative-gender elements: - male: [] - female: [\"FEMALe\"] - other: [] - unknown: [] Step 3: Export Composite application and deploy in the Micro Integrator. \u00b6 After completing the above steps, you can export the deployable composite applications for the two projects. Following artifacts need to be deployed in the WSO2 openhealthcare integration server in order to make FHIR mapper templates to work. FHIR Integration API carbon app -> repository/deployment/server/carbonapps FHIR Source Integration carbon ap -> repository/deployment/server/carbonapps Exporting Integration Logic as a CApp Testing \u00b6 Apply wso2oh-mi-accelerator-3.0.0 in wso2 micro integrator. (A doc should be written in base-scenarios) We can use Curl or Postman to try the API. The testing steps are provided for curl. Steps for Postman should be straightforward and can be derived from the curl requests. Invoke the endpoint and you will be able to see the response in the step2 in 'What you'll build' section. curl --location --request GET 'http://localhost:8290/r4/Patient/?_profile=http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient&endpoint=https://run.mocky.io/v3/7d2f454d-14d3-4480-bff7-8da0e818e2da'","title":"Example"},{"location":"fhir/references/fhir-mapping-templates-example/#example","text":"","title":"Example"},{"location":"fhir/references/fhir-mapping-templates-example/#coverting-xml-payload-to-c4bb-patient-example-using-fhir-read-mapping-templates","text":"This example will guide you to convert an XML Payload to CRBB-Patient profile.","title":"Coverting XML payload to C4BB Patient Example using FHIR Read Mapping Templates"},{"location":"fhir/references/fhir-mapping-templates-example/#what-you-will-build","text":"You will have an XML payload as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <patientCollection> <patient> <id>285137</id> <ethnicity__pc>Unknown</ethnicity__pc> <gender__pc>FEMALe</gender__pc> <lastname>OVERKAMP</lastname> <personbirthdate>1987-11-03+05:30</personbirthdate> <firstname>JUSTIN</firstname> <phone>(062) 8377233</phone> <language__c>English</language__c> <billingcountrycode>US</billingcountrycode> <personmailingpostalcode>344532</personmailingpostalcode> <personmailingstate>NY</personmailingstate> <personmailingcity>New York</personmailingcity> <personmailingstreet>1150 476 Co Rd</personmailingstreet> </patient> </patientCollection> This will be converted to an FHIR payload using FHIR Mappings. The final FHIR Payload (CRBB Patient ) will be as below. { \"resourceType\": \"Bundle\", \"meta\": { \"lastUpdated\": \"2022-05-24T23:42:32.221+00:00\" }, \"type\": \"searchset\", \"total\": 1, \"entry\": [ { \"resource\": { \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"extension\": [ { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\", \"extension\": [ { \"url\": \"text\", \"valueString\": \"Unknown\" } ] }, { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\", \"valueString\": \"F\" } ], \"identifier\": [ { \"type\": { \"coding\": [ { \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"MB\", \"display\": \"Member Number\" } ] }, \"value\": \"285137\" } ], \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ], \"telecom\": [ { \"system\": \"phone\", \"value\": \"(062) 8377233\" } ], \"gender\": \"female\", \"birthDate\": \"1987-11-03\", \"address\": [ { \"type\": \"physical\", \"line\": [ \"1150 476 Co Rd\" ], \"city\": \"New York\", \"state\": \"NY\", \"postalCode\": \"344532\", \"country\": \"US\" } ], \"communication\": [ { \"language\": { \"coding\": [ { \"system\": \"urn:ietf:bcp:47\", \"code\": \"en\" } ] } } ] } } ] }","title":"What you will build"},{"location":"fhir/references/fhir-mapping-templates-example/#setting-up-the-environment","text":"","title":"Setting up the environment"},{"location":"fhir/references/fhir-mapping-templates-example/#import-projects","text":"The user will be provided two project zip files, which are projectsGenerationTool_sampleclient_api.zip file and projectsGenerationTool_sampleclient_integration.zip file. These need to be imported to WSO2 Integration Studio Unzip the two projects. Please follow the steps to import the projects to the Integration Studio. Import-Projects","title":"Import Projects"},{"location":"fhir/references/fhir-mapping-templates-example/#prerequsites","text":"Create the endpoint. Right click on the sampleclient_integration project, and select, 'New' -> 'Endpoint'. The XML payload is already available. Create the following endpoint. Make sure to create the endpoint name as 'uri.var.endpoint'. We do this as we need to call the endpoint as a query parameter. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <endpoint name=\"uri.var.endpoint\" xmlns=\"http://ws.apache.org/ns/synapse\"> <http method=\"get\" uri-template=\"{uri.var.endpoint}\"> <suspendOnFailure> <initialDuration>-1</initialDuration> <progressionFactor>1.0</progressionFactor> </suspendOnFailure> <markForSuspension> <retriesBeforeSuspension>0</retriesBeforeSuspension> </markForSuspension> </http> </endpoint>","title":"Prerequsites"},{"location":"fhir/references/fhir-mapping-templates-example/#step-1implement-source-system-connection-logic-for-the-relevant-fhir-api","text":"This can be found under the templates section of the synapse-configs of the source integration project which ends with sourceConnect_template suffix. In this example, it is sampleclient_C4BB_C4BBPatient_search_sourceConnect_template.xml In this step we can provide the endpoint we created in Prerequsites using a call mediator. The source will be as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_C4BB_C4BBPatient_search_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <parameter defaultValue=\"\" isMandatory=\"false\" name=\"id\"/> <sequence> <property expression=\"get-property('query.param.endpoint')\" name=\"uri.var.endpoint\" scope=\"default\" type=\"STRING\"/> <call> <endpoint key=\"uri.var.endpoint\"/> </call> </sequence> </template>","title":"Step 1:Implement source system connection logic for the relevant FHIR API"},{"location":"fhir/references/fhir-mapping-templates-example/#step-2-implement-the-fhir-mappings","text":"After having the source payload from backend sources, then you can implement the FHIR mappings. Go to the Source integration project and open the registry resources project. There are three types of templates which are in yaml format. Resource Mapping templates Key Value Mapping template file (keymappings.yaml) Conditions mapping template file (conditions.yaml) Resource templates Developer only needs to fill the relevant source value from the source payload using relevant Xpath or a JsonPath. In this example c4bb-patient.yaml file. We need to provide the following Xpaths according to the example. Path to source payload root element sourcePayloadRoot : read: //patientCollection/patient write: Relative path to source payload child data elements - source : read : //id write : Part of crbb-patient.yml file is as below. Like wise you can fill the mappings. resourceType : Patient profile : http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient sourcePayloadRoot : read: //patientCollection/patient write: elements: - source : read : //id write : fhir : attribute : Patient.id dataType: id Key Value Mapping Template The Key Value Mapping template file is used to resolve the source system values with the FHIR specific values for resource fields. For example in the FHIR Patient resource, the gender field should only have standard values defined by the FHIR specification which are \u2018male\u2019 for Male, \u2018female\u2019 for Female. In source systems, these kinds of data may have a different representation. In such cases we can use the Key Value Mapping template to map the source system representation to the standard FHIR representation. In this example, in the given XML payload, you can see that the gender is represented as FEMALe, which is not a value that FHIR system accepts. <gender__pc>FEMALe</gender__pc> Therefore, we need a mapping for this. Open 'keymappings.yaml'file and do the mapping as below. - name: administrative-gender elements: - male: [] - female: [\"FEMALe\"] - other: [] - unknown: []","title":"Step 2: Implement the FHIR Mappings"},{"location":"fhir/references/fhir-mapping-templates-example/#step-3-export-composite-application-and-deploy-in-the-micro-integrator","text":"After completing the above steps, you can export the deployable composite applications for the two projects. Following artifacts need to be deployed in the WSO2 openhealthcare integration server in order to make FHIR mapper templates to work. FHIR Integration API carbon app -> repository/deployment/server/carbonapps FHIR Source Integration carbon ap -> repository/deployment/server/carbonapps Exporting Integration Logic as a CApp","title":"Step 3: Export Composite application and deploy in the Micro Integrator."},{"location":"fhir/references/fhir-mapping-templates-example/#testing","text":"Apply wso2oh-mi-accelerator-3.0.0 in wso2 micro integrator. (A doc should be written in base-scenarios) We can use Curl or Postman to try the API. The testing steps are provided for curl. Steps for Postman should be straightforward and can be derived from the curl requests. Invoke the endpoint and you will be able to see the response in the step2 in 'What you'll build' section. curl --location --request GET 'http://localhost:8290/r4/Patient/?_profile=http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient&endpoint=https://run.mocky.io/v3/7d2f454d-14d3-4480-bff7-8da0e818e2da'","title":"Testing"},{"location":"fhir/references/fhir-overview/","text":"FHIR - Overview \u00b6","title":"Overview"},{"location":"fhir/references/fhir-overview/#fhir-overview","text":"","title":"FHIR - Overview"},{"location":"fhir/references/fhir-resources/","text":"FHIR resources \u00b6","title":"Resources"},{"location":"fhir/references/fhir-resources/#fhir-resources","text":"","title":"FHIR resources"},{"location":"fhir/references/fhir-write-templates-examples/","text":"Example of FHIR Write Mapping Templates \u00b6 Converting a FHIR Payload to an XML Payload \u00b6 This example demonstrate how we can convert a FHIR Payload to an XML Payload using FHIR Write Mapping Templates. What you will build \u00b6 You will be having a FHIR Payload as below. { \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"lastUpdated\":\"2022-04-23\", \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ] } This will be converted to the below XML Payload. In this example we will be looking how can we create an XML payload with namespaces. <payload xmlns=\"http://ws.apache.org/ns/synapse\" xmlns:ns1=\"https://smarthealth.org\"> <patientPayload> <ns1:Patient> <id>285137</id> <updatedTime>2022-04-23</updatedTime> <lastname>OVERKAMP</lastname> <firstname>JUSTIN</firstname> </ns1:Patient> </patientPayload> </payload> Setting up the environment \u00b6 Import Projects \u00b6 The user will be provided two project zip files, which are projectsGenerationTool_sampleclient_api.zip file and projectsGenerationTool_sampleclient_integration.zip file. These need to be imported to WSO2 Integration Studio Unzip the two projects. Please follow the steps to import the projects to the Integration Studio. Import-Projects Step 1:Implement source system connection logic for the relevant FHIR API \u00b6 In sampleclient_Patient_write_sourceConnect_template.xml, we need to do the following implementation. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_Patient_write_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <sequence> <payloadFactory media-type=\"xml\"> <format> <payload xmlns:ns1=\"https://smarthealth.org\">$1</payload> </format> <args> <arg evaluator=\"xml\" expression=\"$ctx:patientPayload\"/> </args> </payloadFactory> <respond/> </sequence> </template> Step 2: Implement the FHIR Mappings \u00b6 We can implement the FHIR mapping as below to generate the XML payload. We can define the namespaces under the 'namespaces' tag. resourceType : Patient profile : http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient sourcePayloadRoot : read: //patientCollection/patient write: namespaces: ns1: https://smarthealth.org elements: - source : read : write : $ctx:patientPayload//ns1:Patient/id fhir : attribute : Patient.id dataType: id - source : read : write : $ctx:patientPayload//ns1:Patient/updatedTime fhir : attribute : Patient.meta.lastUpdated dataType: instant meta : root: Patient.meta rootType: Meta Step 3: Export Composite application and deploy in the Micro Integrator. \u00b6 After completing the above steps, you can export the deployable composite applications for the two projects. Following artifacts need to be deployed in the WSO2 openhealthcare integration server in order to make FHIR mapper templates to work. FHIR Integration API carbon app -> repository/deployment/server/carbonapps FHIR Source Integration carbon ap -> repository/deployment/server/carbonapps Exporting Integration Logic as a CApp Testing \u00b6 Apply wso2oh-mi-accelerator-3.0.0 in wso2 micro integrator. (A doc should be written in base-scenarios) We can use Curl or Postman to try the API. The testing steps are provided for curl. Steps for Postman should be straightforward and can be derived from the curl requests. Invoke the endpoint and you will be able to see the response in the step2 in 'What you'll build' section. curl --location --request POST 'http://localhost:8290/r4/Patient' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"lastUpdated\":\"2022-04-23\", \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ] }' Implement the FHIR Mappings to create a JSON payload \u00b6 To create a JSON payload, we can implement the FHIR mapping as below. elements: - source : read: write: $ctx:patientPayload$.Patient.id fhir: attribute: Patient.id dataType: id - source : read: write: $ctx:patientPayload$.Patient.updatedTime fhir: attribute: Patient.meta.lastUpdated dataType: instant meta: root: Patient.meta rootType: Meta The sampleclient_Patient_write_sourceConnect_template.xml should be implemented as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_Patient_write_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <sequence> <log> <property expression=\"$ctx:patientPayload\" name=\"patientPayloadLog\"/> </log> <payloadFactory media-type=\"json\"> <format>{$1}</format> <args> <arg evaluator=\"json\" expression=\"$ctx:patientPayload\"/> </args> </payloadFactory> <respond/> </sequence> </template> It will create the JSON payload as below. { { \"Patient\": [ { \"updatedTime\": \"2022-04-23\", \"firstname\": \"JUSTIN\", \"id\": \"285137\", \"lastname\": \"OVERKAMP\" } ] } }","title":"Example of FHIR Write Mapping Templates"},{"location":"fhir/references/fhir-write-templates-examples/#example-of-fhir-write-mapping-templates","text":"","title":"Example of FHIR Write Mapping Templates"},{"location":"fhir/references/fhir-write-templates-examples/#converting-a-fhir-payload-to-an-xml-payload","text":"This example demonstrate how we can convert a FHIR Payload to an XML Payload using FHIR Write Mapping Templates.","title":"Converting a FHIR Payload to an XML Payload"},{"location":"fhir/references/fhir-write-templates-examples/#what-you-will-build","text":"You will be having a FHIR Payload as below. { \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"lastUpdated\":\"2022-04-23\", \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ] } This will be converted to the below XML Payload. In this example we will be looking how can we create an XML payload with namespaces. <payload xmlns=\"http://ws.apache.org/ns/synapse\" xmlns:ns1=\"https://smarthealth.org\"> <patientPayload> <ns1:Patient> <id>285137</id> <updatedTime>2022-04-23</updatedTime> <lastname>OVERKAMP</lastname> <firstname>JUSTIN</firstname> </ns1:Patient> </patientPayload> </payload>","title":"What you will build"},{"location":"fhir/references/fhir-write-templates-examples/#setting-up-the-environment","text":"","title":"Setting up the environment"},{"location":"fhir/references/fhir-write-templates-examples/#import-projects","text":"The user will be provided two project zip files, which are projectsGenerationTool_sampleclient_api.zip file and projectsGenerationTool_sampleclient_integration.zip file. These need to be imported to WSO2 Integration Studio Unzip the two projects. Please follow the steps to import the projects to the Integration Studio. Import-Projects","title":"Import Projects"},{"location":"fhir/references/fhir-write-templates-examples/#step-1implement-source-system-connection-logic-for-the-relevant-fhir-api","text":"In sampleclient_Patient_write_sourceConnect_template.xml, we need to do the following implementation. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_Patient_write_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <sequence> <payloadFactory media-type=\"xml\"> <format> <payload xmlns:ns1=\"https://smarthealth.org\">$1</payload> </format> <args> <arg evaluator=\"xml\" expression=\"$ctx:patientPayload\"/> </args> </payloadFactory> <respond/> </sequence> </template>","title":"Step 1:Implement source system connection logic for the relevant FHIR API"},{"location":"fhir/references/fhir-write-templates-examples/#step-2-implement-the-fhir-mappings","text":"We can implement the FHIR mapping as below to generate the XML payload. We can define the namespaces under the 'namespaces' tag. resourceType : Patient profile : http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient sourcePayloadRoot : read: //patientCollection/patient write: namespaces: ns1: https://smarthealth.org elements: - source : read : write : $ctx:patientPayload//ns1:Patient/id fhir : attribute : Patient.id dataType: id - source : read : write : $ctx:patientPayload//ns1:Patient/updatedTime fhir : attribute : Patient.meta.lastUpdated dataType: instant meta : root: Patient.meta rootType: Meta","title":"Step 2: Implement the FHIR Mappings"},{"location":"fhir/references/fhir-write-templates-examples/#step-3-export-composite-application-and-deploy-in-the-micro-integrator","text":"After completing the above steps, you can export the deployable composite applications for the two projects. Following artifacts need to be deployed in the WSO2 openhealthcare integration server in order to make FHIR mapper templates to work. FHIR Integration API carbon app -> repository/deployment/server/carbonapps FHIR Source Integration carbon ap -> repository/deployment/server/carbonapps Exporting Integration Logic as a CApp","title":"Step 3: Export Composite application and deploy in the Micro Integrator."},{"location":"fhir/references/fhir-write-templates-examples/#testing","text":"Apply wso2oh-mi-accelerator-3.0.0 in wso2 micro integrator. (A doc should be written in base-scenarios) We can use Curl or Postman to try the API. The testing steps are provided for curl. Steps for Postman should be straightforward and can be derived from the curl requests. Invoke the endpoint and you will be able to see the response in the step2 in 'What you'll build' section. curl --location --request POST 'http://localhost:8290/r4/Patient' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"lastUpdated\":\"2022-04-23\", \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ] }'","title":"Testing"},{"location":"fhir/references/fhir-write-templates-examples/#implement-the-fhir-mappings-to-create-a-json-payload","text":"To create a JSON payload, we can implement the FHIR mapping as below. elements: - source : read: write: $ctx:patientPayload$.Patient.id fhir: attribute: Patient.id dataType: id - source : read: write: $ctx:patientPayload$.Patient.updatedTime fhir: attribute: Patient.meta.lastUpdated dataType: instant meta: root: Patient.meta rootType: Meta The sampleclient_Patient_write_sourceConnect_template.xml should be implemented as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_Patient_write_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <sequence> <log> <property expression=\"$ctx:patientPayload\" name=\"patientPayloadLog\"/> </log> <payloadFactory media-type=\"json\"> <format>{$1}</format> <args> <arg evaluator=\"json\" expression=\"$ctx:patientPayload\"/> </args> </payloadFactory> <respond/> </sequence> </template> It will create the JSON payload as below. { { \"Patient\": [ { \"updatedTime\": \"2022-04-23\", \"firstname\": \"JUSTIN\", \"id\": \"285137\", \"lastname\": \"OVERKAMP\" } ] } }","title":"Implement the FHIR Mappings to create a JSON payload"},{"location":"fhir/references/hl7-to-fhir-mapper/","text":"HL7 to FHIR mapper \u00b6 V2 to FHIR Implementation Guide Importing Connectors into WSO2 Integration Studio","title":"HL7 to FHIR"},{"location":"fhir/references/hl7-to-fhir-mapper/#hl7-to-fhir-mapper","text":"V2 to FHIR Implementation Guide Importing Connectors into WSO2 Integration Studio","title":"HL7 to FHIR mapper"},{"location":"fhir/references/patient-access-api/","text":"FHIR patient access API \u00b6","title":"Patient access API"},{"location":"fhir/references/patient-access-api/#fhir-patient-access-api","text":"","title":"FHIR patient access API"},{"location":"fhir/references/provider-directory-api/","text":"FHIR provider directory API \u00b6","title":"Provider directory API"},{"location":"fhir/references/provider-directory-api/#fhir-provider-directory-api","text":"","title":"FHIR provider directory API"},{"location":"fhir/references/wso2-fhir-mapping-templates/","text":"WSO2 FHIR mapping templates \u00b6","title":"Mapping templates"},{"location":"fhir/references/wso2-fhir-mapping-templates/#wso2-fhir-mapping-templates","text":"","title":"WSO2 FHIR mapping templates"},{"location":"fhir/references/wso2-fhir-project/","text":"WSO2 FHIR project \u00b6","title":"Overview"},{"location":"fhir/references/wso2-fhir-project/#wso2-fhir-project","text":"","title":"WSO2 FHIR project"},{"location":"get-started/architecture/","text":"Architecture!","title":"Architecturee"},{"location":"get-started/open-healthcare-quickstart/","text":"Open healthcare - Quick start \u00b6","title":"Quickstart"},{"location":"get-started/open-healthcare-quickstart/#open-healthcare-quick-start","text":"","title":"Open healthcare - Quick start"},{"location":"get-started/open-healthcare/","text":"What is Open Healthcare","title":"What is Open Healthcare"},{"location":"hl7/guides/hl7-guides-overview/","text":"Working with HL7 - Overview \u00b6","title":"Overview"},{"location":"hl7/guides/hl7-guides-overview/#working-with-hl7-overview","text":"","title":"Working with HL7 - Overview"},{"location":"hl7/references/hl7-overview/","text":"HL7 - Overview \u00b6","title":"Overview"},{"location":"hl7/references/hl7-overview/#hl7-overview","text":"","title":"HL7 - Overview"},{"location":"install-and-setup/deploy-docker/","text":"Deploy on Docker \u00b6 Prerequisites \u00b6 Docker v17.09.0 or above Git client WSO2 Open Healthcare API Manager \u00b6 This section defines the step-by-step instructions to build an Alpine Linux based Docker image for WSO2 Open Healthcare API Manager version 4.0.0 . How to build an image and run \u00b6 1. Checkout this repository into your local machine using the following Git client command. \u00b6 git clone https://github.com/wso2-enterprise/open-healthcare-docker.git The local copy of the apim directory will be referred to as AM_DOCKERFILE_HOME from this point onwards. 2. Place the chosen Open Healthcare accelerators and custom artifacts in the image build context. \u00b6 Place the chosen version of the Open Healthcare API Manager accelerator artifact in the <AM_DOCKERFILE_HOME>/resources/accelerator directory. [Optional] Place any customer specific Open Healthcare artifacts in the <AM_DOCKERFILE_HOME>/resources/healthcare directory. The artifacts need to be placed in the aforementioned directory in such a way that, they resemble the directory structure within the product pack. 3. Build the Docker image. \u00b6 Navigate to <AM_DOCKERFILE_HOME> directory. Execute docker build command. An example is provided below. docker build \\ --build-arg BASE_DOCKER_IMAGE_REGISTRY=<CONTAINER_REGISTRY_IDENTIFIER> \\ --build-arg BASE_PRODUCT_VERSION=<BASE_PRODUCT_VERSION> \\ --build-arg OH_ACCELERATOR_VERSION=<OH_APIM_ACCELERATOR_VERSION> \\ -t wso2open-healthcare-am:4.0.0 . The aforementioned Dockerfile build arguments are explained below. BASE_DOCKER_IMAGE_REGISTRY : Hostname:Port identifier of the Docker image registry hosting the base product image. For example, if you are referencing the official WSO2 Private Docker registry image you may set this parameter to docker.wso2.com . By default, this is set to docker.wso2.com . BASE_PRODUCT_VERSION : The API Manager product version and optionally the update level. For example, if you are referencing the official WSO2 Private Docker registry image , the tag 4.0.0.0 references the latest WSO2 U2 Update level (fourth digit 0 ) whereas if you want to refer to a particular Update level, the pattern would be 4.0.0.<upate_level> . By default, this is set to the latest U2 Update level tag 4.0.0.0 . OH_ACCELERATOR_VERSION : Open Healthcare API Manager accelerator release version deployed in step [2]. 4. Running the Docker image. \u00b6 docker run -it -p 9443:9443 wso2open-healthcare-am:4.0.0 Here, only port 9443 (HTTPS servlet transport) has been mapped to a Docker host port. You may map other container service ports, which have been exposed to Docker host ports, as desired. 5. Accessing management console. \u00b6 To access the management console, use the docker host IP and port 9443. https://<DOCKER_HOST>:9443/carbon In here, refers to hostname or IP of the host machine on top of which containers are spawned. WSO2 Open Healthcare Micro Integrator \u00b6 This section defines the step-by-step instructions to build an Alpine Linux based Docker image for WSO2 Open Healthcare Micro Integrator version 4.0.0 . How to build an image and run \u00b6 1. Checkout this repository into your local machine using the following Git client command. \u00b6 git clone https://github.com/wso2-enterprise/open-healthcare-docker.git The local copy of the micro-integrator directory will be referred to as MI_DOCKERFILE_HOME from this point onwards. 2. Place the chosen Open Healthcare accelerators and custom artifacts in the image build context. \u00b6 Place the chosen version of the Open Healthcare Micro Integrator accelerator artifact in the <MI_DOCKERFILE_HOME>/resources/accelerator directory. [Optional] Place any customer specific Open Healthcare artifacts in the <MI_DOCKERFILE_HOME>/resources/healthcare directory. The artifacts need to be placed in the aforementioned directory in such a way that, they resemble the directory structure within the product pack. 3. Build the Docker image. \u00b6 Navigate to <MI_DOCKERFILE_HOME> directory. Execute docker build command. An example is provided below. docker build \\ --build-arg BASE_DOCKER_IMAGE_REGISTRY=<CONTAINER_REGISTRY_IDENTIFIER> \\ --build-arg BASE_PRODUCT_VERSION=<BASE_PRODUCT_VERSION> \\ --build-arg OH_ACCELERATOR_VERSION=<OH_MI_ACCELERATOR_VERSION> \\ -t wso2open-healthcare-mi:4.0.0 . The aforementioned Dockerfile build arguments are explained below. BASE_DOCKER_IMAGE_REGISTRY : Hostname:Port identifier of the Docker image registry hosting the base product image. For example, if you are referencing the official WSO2 Private Docker registry image you may set this parameter to docker.wso2.com . By default, this build argument set to docker.wso2.com . BASE_PRODUCT_VERSION : The Micro Integrator product version and optionally the update level. For example, if you are referencing the official WSO2 Private Docker registry image , the tag 4.0.0.0 references the latest WSO2 U2 Update level (fourth digit 0 ) whereas if you want to refer to a particular Update level, the pattern would be 4.0.0.<upate_level> . By default, this is set to the latest U2 Update level tag 4.0.0.0 . OH_ACCELERATOR_VERSION : Open Healthcare Micro Integrator accelerator release version deployed in step [2]. 4. Running the Docker image. \u00b6 docker run -it -p 8253:8253 -p 8290:8290 wso2open-healthcare-mi:4.0.0 Docker command usage references \u00b6 Docker build command reference Docker run command reference Dockerfile reference","title":"Deploy on Docker"},{"location":"install-and-setup/deploy-docker/#deploy-on-docker","text":"","title":"Deploy on Docker"},{"location":"install-and-setup/deploy-docker/#prerequisites","text":"Docker v17.09.0 or above Git client","title":"Prerequisites"},{"location":"install-and-setup/deploy-docker/#wso2-open-healthcare-api-manager","text":"This section defines the step-by-step instructions to build an Alpine Linux based Docker image for WSO2 Open Healthcare API Manager version 4.0.0 .","title":"WSO2 Open Healthcare API Manager"},{"location":"install-and-setup/deploy-docker/#how-to-build-an-image-and-run","text":"","title":"How to build an image and run"},{"location":"install-and-setup/deploy-docker/#1-checkout-this-repository-into-your-local-machine-using-the-following-git-client-command","text":"git clone https://github.com/wso2-enterprise/open-healthcare-docker.git The local copy of the apim directory will be referred to as AM_DOCKERFILE_HOME from this point onwards.","title":"1. Checkout this repository into your local machine using the following Git client command."},{"location":"install-and-setup/deploy-docker/#2-place-the-chosen-open-healthcare-accelerators-and-custom-artifacts-in-the-image-build-context","text":"Place the chosen version of the Open Healthcare API Manager accelerator artifact in the <AM_DOCKERFILE_HOME>/resources/accelerator directory. [Optional] Place any customer specific Open Healthcare artifacts in the <AM_DOCKERFILE_HOME>/resources/healthcare directory. The artifacts need to be placed in the aforementioned directory in such a way that, they resemble the directory structure within the product pack.","title":"2. Place the chosen Open Healthcare accelerators and custom artifacts in the image build context."},{"location":"install-and-setup/deploy-docker/#3-build-the-docker-image","text":"Navigate to <AM_DOCKERFILE_HOME> directory. Execute docker build command. An example is provided below. docker build \\ --build-arg BASE_DOCKER_IMAGE_REGISTRY=<CONTAINER_REGISTRY_IDENTIFIER> \\ --build-arg BASE_PRODUCT_VERSION=<BASE_PRODUCT_VERSION> \\ --build-arg OH_ACCELERATOR_VERSION=<OH_APIM_ACCELERATOR_VERSION> \\ -t wso2open-healthcare-am:4.0.0 . The aforementioned Dockerfile build arguments are explained below. BASE_DOCKER_IMAGE_REGISTRY : Hostname:Port identifier of the Docker image registry hosting the base product image. For example, if you are referencing the official WSO2 Private Docker registry image you may set this parameter to docker.wso2.com . By default, this is set to docker.wso2.com . BASE_PRODUCT_VERSION : The API Manager product version and optionally the update level. For example, if you are referencing the official WSO2 Private Docker registry image , the tag 4.0.0.0 references the latest WSO2 U2 Update level (fourth digit 0 ) whereas if you want to refer to a particular Update level, the pattern would be 4.0.0.<upate_level> . By default, this is set to the latest U2 Update level tag 4.0.0.0 . OH_ACCELERATOR_VERSION : Open Healthcare API Manager accelerator release version deployed in step [2].","title":"3. Build the Docker image."},{"location":"install-and-setup/deploy-docker/#4-running-the-docker-image","text":"docker run -it -p 9443:9443 wso2open-healthcare-am:4.0.0 Here, only port 9443 (HTTPS servlet transport) has been mapped to a Docker host port. You may map other container service ports, which have been exposed to Docker host ports, as desired.","title":"4. Running the Docker image."},{"location":"install-and-setup/deploy-docker/#5-accessing-management-console","text":"To access the management console, use the docker host IP and port 9443. https://<DOCKER_HOST>:9443/carbon In here, refers to hostname or IP of the host machine on top of which containers are spawned.","title":"5. Accessing management console."},{"location":"install-and-setup/deploy-docker/#wso2-open-healthcare-micro-integrator","text":"This section defines the step-by-step instructions to build an Alpine Linux based Docker image for WSO2 Open Healthcare Micro Integrator version 4.0.0 .","title":"WSO2 Open Healthcare Micro Integrator"},{"location":"install-and-setup/deploy-docker/#how-to-build-an-image-and-run_1","text":"","title":"How to build an image and run"},{"location":"install-and-setup/deploy-docker/#1-checkout-this-repository-into-your-local-machine-using-the-following-git-client-command_1","text":"git clone https://github.com/wso2-enterprise/open-healthcare-docker.git The local copy of the micro-integrator directory will be referred to as MI_DOCKERFILE_HOME from this point onwards.","title":"1. Checkout this repository into your local machine using the following Git client command."},{"location":"install-and-setup/deploy-docker/#2-place-the-chosen-open-healthcare-accelerators-and-custom-artifacts-in-the-image-build-context_1","text":"Place the chosen version of the Open Healthcare Micro Integrator accelerator artifact in the <MI_DOCKERFILE_HOME>/resources/accelerator directory. [Optional] Place any customer specific Open Healthcare artifacts in the <MI_DOCKERFILE_HOME>/resources/healthcare directory. The artifacts need to be placed in the aforementioned directory in such a way that, they resemble the directory structure within the product pack.","title":"2. Place the chosen Open Healthcare accelerators and custom artifacts in the image build context."},{"location":"install-and-setup/deploy-docker/#3-build-the-docker-image_1","text":"Navigate to <MI_DOCKERFILE_HOME> directory. Execute docker build command. An example is provided below. docker build \\ --build-arg BASE_DOCKER_IMAGE_REGISTRY=<CONTAINER_REGISTRY_IDENTIFIER> \\ --build-arg BASE_PRODUCT_VERSION=<BASE_PRODUCT_VERSION> \\ --build-arg OH_ACCELERATOR_VERSION=<OH_MI_ACCELERATOR_VERSION> \\ -t wso2open-healthcare-mi:4.0.0 . The aforementioned Dockerfile build arguments are explained below. BASE_DOCKER_IMAGE_REGISTRY : Hostname:Port identifier of the Docker image registry hosting the base product image. For example, if you are referencing the official WSO2 Private Docker registry image you may set this parameter to docker.wso2.com . By default, this build argument set to docker.wso2.com . BASE_PRODUCT_VERSION : The Micro Integrator product version and optionally the update level. For example, if you are referencing the official WSO2 Private Docker registry image , the tag 4.0.0.0 references the latest WSO2 U2 Update level (fourth digit 0 ) whereas if you want to refer to a particular Update level, the pattern would be 4.0.0.<upate_level> . By default, this is set to the latest U2 Update level tag 4.0.0.0 . OH_ACCELERATOR_VERSION : Open Healthcare Micro Integrator accelerator release version deployed in step [2].","title":"3. Build the Docker image."},{"location":"install-and-setup/deploy-docker/#4-running-the-docker-image_1","text":"docker run -it -p 8253:8253 -p 8290:8290 wso2open-healthcare-mi:4.0.0","title":"4. Running the Docker image."},{"location":"install-and-setup/deploy-docker/#docker-command-usage-references","text":"Docker build command reference Docker run command reference Dockerfile reference","title":"Docker command usage references"},{"location":"install-and-setup/deploy-kubernetes/","text":"Deploy on Kubernetes \u00b6","title":"Deploy on Kubernetes"},{"location":"install-and-setup/deploy-kubernetes/#deploy-on-kubernetes","text":"","title":"Deploy on Kubernetes"},{"location":"install-and-setup/deployment/","text":"Deployment methods \u00b6","title":"Deployment methods"},{"location":"install-and-setup/deployment/#deployment-methods","text":"","title":"Deployment methods"},{"location":"install-and-setup/manual/","text":"Manual Installation Guide \u00b6 Install WSO2 OH API Manager \u00b6 Prerequisites \u00b6 Refer to Product Compatibilities for Open Healthcare supported base product distributions. Download a Open Healthacare supported base distribution of WSO2 API Manager . Download the compatible WSO2 Open Healthcare APIM Accelerator. (Refer Product Compatibilities ) Installation Steps \u00b6 Extract WSO2 APIM product. Let's call it <WSO2_APIM_HOME> . Navigate to <WSO2_APIM_HOME>/bin directory and execute the update command based on the operating system to bring WSO2 API Manager up to date by running the Update Tool . At first, you may need to run the relevant update command twice. First time you execute ./wso2update_<os> updates the Update Client Tool. The subsequent ./wso2update_<os> updates the product pack. Extract WSO2 OH APIM Accelerator to <WSO2_APIM_HOME> . Let's call it <WSO2_OH_APIM_ACC_HOME> . Navigate to <WSO2_OH_APIM_ACC_HOME> directory. To setup the embedded H2 database of APIM with pre-loaded tables required by WSO2 Open Healthcare, copy the database/WSO2AM_DB.mv.db file to repository/database folder in <WSO2_APIM_HOME> . Optional \u00b6 If you want create these tables in an existing installation of APIM, refer to the tables defined in the scripts under the dbscripts folder in <WSO2_OH_APIM_ACC_HOME> . You may have to manually execute the scripts in order to add them to an existing WSO2AM_DB database. In the <WSO2_OH_APIM_ACC_HOME> directory, execute ./bin/merge.sh command. This will copy the artifacts to the WSO2 APIM and add the required configurations. Navigate to <WSO2_APIM_HOME> directory and execute ./bin/api-manager.sh to start the APIM server with WSO2 OH Accelerators. Audit Logs \u00b6 Running ./bin/merge.sh script creates a audit log folder in the product home. Structure of it looks like below; oh-accelerator \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 jaggeryapps \u2502 \u2514\u2500\u2500 webapps \u2514\u2500\u2500 merge_audit.log merge_audit.log will have an audit line per execution of the merge.sh script of the accelerator. Each line contains execution date and time, user account and the version of the accelerator. Example log line is below; Mon May 31 22:01:55 +0530 2021 - john - WSO2 Open Healthcare API Manager 4.0.0 Accelerator - v3.0.0 backup folder contains the files that were originally there in the APIM product before running the accelerator. Please note that only the last state will be there. Install WSO2 OH Micro Integrator \u00b6 Prerequisites \u00b6 Refer to Product Compatibilities for Open Healthcare supported base product distributions. Download a Open Healthacare supported base distribution of WSO2 Micro Integrator . Download the compatible WSO2 Open Healthcare MI Accelerator. (Refer Product Compatibilities ) Installation Steps \u00b6 Extract WSO2 MI product. Let's call it <WSO2_MI_HOME> . Navigate to <WSO2_MI_HOME>/bin directory and execute the update command based on the operating system to bring WSO2 Micro Integrator up to date by running the Update Tool . At first, you may need to run the relevant update command twice. First time you execute ./wso2update_<os> updates the Update Client Tool. The subsequent ./wso2update_<os> updates the product pack. Extract WSO2 OH MI Accelerator to <WSO2_MI_HOME> . Let's call it <WSO2_OH_MI_ACC_HOME> . Navigate to <WSO2_OH_MI_ACC_HOME> directory and execute ./bin/merge.sh command. This will copy the artifacts to the WSO2 MI and add the required configurations. Navigate to <WSO2_MI_HOME> directory and execute ./bin/micro-integrator.sh to start the MI server with WSO2 OH Accelerators. Audit Logs \u00b6 Running ./bin/merge.sh script creates a audit log folder in the product home. Structure of it looks like below; oh-accelerator \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 jaggeryapps \u2502 \u2514\u2500\u2500 webapps \u2514\u2500\u2500 merge_audit.log merge_audit.log will have an audit line per execution of the merge.sh script of the accelerator. Each line contains execution date and time, user account and the version of the accelerator. Example log line is below; Mon May 31 22:01:55 +0530 2021 - john - WSO2 Open Healthcare Micro Integrator 1.2.0 Accelerator - v1.0.2 backup folder contains the files that were originally there in the MI product before running the accelerator. Please note that only the last state will be there. Product Compatibilities \u00b6 Product Compatible Open Healthcare Accelarator APIM 4.0.0 APIM OH Accelerator 3.0.0 APIM 3.2.0 APIM OH Accelerator 1.0.12 APIM 3.0.0 APIM OH Accelerator 0.5 MI 4.0.0 MI OH Accelerator 3.0.0","title":"Manual installation"},{"location":"install-and-setup/manual/#manual-installation-guide","text":"","title":"Manual Installation Guide"},{"location":"install-and-setup/manual/#install-wso2-oh-api-manager","text":"","title":"Install WSO2 OH API Manager"},{"location":"install-and-setup/manual/#prerequisites","text":"Refer to Product Compatibilities for Open Healthcare supported base product distributions. Download a Open Healthacare supported base distribution of WSO2 API Manager . Download the compatible WSO2 Open Healthcare APIM Accelerator. (Refer Product Compatibilities )","title":"Prerequisites"},{"location":"install-and-setup/manual/#installation-steps","text":"Extract WSO2 APIM product. Let's call it <WSO2_APIM_HOME> . Navigate to <WSO2_APIM_HOME>/bin directory and execute the update command based on the operating system to bring WSO2 API Manager up to date by running the Update Tool . At first, you may need to run the relevant update command twice. First time you execute ./wso2update_<os> updates the Update Client Tool. The subsequent ./wso2update_<os> updates the product pack. Extract WSO2 OH APIM Accelerator to <WSO2_APIM_HOME> . Let's call it <WSO2_OH_APIM_ACC_HOME> . Navigate to <WSO2_OH_APIM_ACC_HOME> directory. To setup the embedded H2 database of APIM with pre-loaded tables required by WSO2 Open Healthcare, copy the database/WSO2AM_DB.mv.db file to repository/database folder in <WSO2_APIM_HOME> .","title":"Installation Steps"},{"location":"install-and-setup/manual/#optional","text":"If you want create these tables in an existing installation of APIM, refer to the tables defined in the scripts under the dbscripts folder in <WSO2_OH_APIM_ACC_HOME> . You may have to manually execute the scripts in order to add them to an existing WSO2AM_DB database. In the <WSO2_OH_APIM_ACC_HOME> directory, execute ./bin/merge.sh command. This will copy the artifacts to the WSO2 APIM and add the required configurations. Navigate to <WSO2_APIM_HOME> directory and execute ./bin/api-manager.sh to start the APIM server with WSO2 OH Accelerators.","title":"Optional"},{"location":"install-and-setup/manual/#audit-logs","text":"Running ./bin/merge.sh script creates a audit log folder in the product home. Structure of it looks like below; oh-accelerator \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 jaggeryapps \u2502 \u2514\u2500\u2500 webapps \u2514\u2500\u2500 merge_audit.log merge_audit.log will have an audit line per execution of the merge.sh script of the accelerator. Each line contains execution date and time, user account and the version of the accelerator. Example log line is below; Mon May 31 22:01:55 +0530 2021 - john - WSO2 Open Healthcare API Manager 4.0.0 Accelerator - v3.0.0 backup folder contains the files that were originally there in the APIM product before running the accelerator. Please note that only the last state will be there.","title":"Audit Logs"},{"location":"install-and-setup/manual/#install-wso2-oh-micro-integrator","text":"","title":"Install WSO2 OH Micro Integrator"},{"location":"install-and-setup/manual/#prerequisites_1","text":"Refer to Product Compatibilities for Open Healthcare supported base product distributions. Download a Open Healthacare supported base distribution of WSO2 Micro Integrator . Download the compatible WSO2 Open Healthcare MI Accelerator. (Refer Product Compatibilities )","title":"Prerequisites"},{"location":"install-and-setup/manual/#installation-steps_1","text":"Extract WSO2 MI product. Let's call it <WSO2_MI_HOME> . Navigate to <WSO2_MI_HOME>/bin directory and execute the update command based on the operating system to bring WSO2 Micro Integrator up to date by running the Update Tool . At first, you may need to run the relevant update command twice. First time you execute ./wso2update_<os> updates the Update Client Tool. The subsequent ./wso2update_<os> updates the product pack. Extract WSO2 OH MI Accelerator to <WSO2_MI_HOME> . Let's call it <WSO2_OH_MI_ACC_HOME> . Navigate to <WSO2_OH_MI_ACC_HOME> directory and execute ./bin/merge.sh command. This will copy the artifacts to the WSO2 MI and add the required configurations. Navigate to <WSO2_MI_HOME> directory and execute ./bin/micro-integrator.sh to start the MI server with WSO2 OH Accelerators.","title":"Installation Steps"},{"location":"install-and-setup/manual/#audit-logs_1","text":"Running ./bin/merge.sh script creates a audit log folder in the product home. Structure of it looks like below; oh-accelerator \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 jaggeryapps \u2502 \u2514\u2500\u2500 webapps \u2514\u2500\u2500 merge_audit.log merge_audit.log will have an audit line per execution of the merge.sh script of the accelerator. Each line contains execution date and time, user account and the version of the accelerator. Example log line is below; Mon May 31 22:01:55 +0530 2021 - john - WSO2 Open Healthcare Micro Integrator 1.2.0 Accelerator - v1.0.2 backup folder contains the files that were originally there in the MI product before running the accelerator. Please note that only the last state will be there.","title":"Audit Logs"},{"location":"install-and-setup/manual/#product-compatibilities","text":"Product Compatible Open Healthcare Accelarator APIM 4.0.0 APIM OH Accelerator 3.0.0 APIM 3.2.0 APIM OH Accelerator 1.0.12 APIM 3.0.0 APIM OH Accelerator 0.5 MI 4.0.0 MI OH Accelerator 3.0.0","title":"Product Compatibilities"},{"location":"install-and-setup/updates/overview/","text":"Updating wso2 products \u00b6 What are WSO2 Updates? \u00b6 WSO2 Updates include improvements that are released by WSO2, on top of a released WSO2 product version. With updates, you do not have to wait until the next product version release to get the product enhancements and security fixes. How to get WSO2 updates? \u00b6 A subscription is mandatory to get WSO2 updates. A Subscription can be obtained by following manner: Trial Subscription: Provides all the functionality of a subscription for 90 days. Paid Subscription: After discussing your specific requirements with one of our WSO2 Accounts manager a paid subscription can be obtained. Through the aforementioned Subscription the subscriber will receive all updates including bug fixes, security fixes, and improvements and 24x7 expert incident support . Read more about WSO2 subscriptions When to use Updates? \u00b6 It is imperative to update your products frequently. It will ensure your environment has the latest improvements and the bug fixes. In case you are faced with an issue in your environment, but if this has been fixed in an update already,and if you have missed a recent update, it could be possible that this issues is already fixed in a most recent update. Whenever WSO2 releases a security update, we inform our customers at our earliest. WSO2 always recommend to applying security updates sooner whenever we release a security update. This will ensure your production environment is secure. How to update your WSO2 products? \u00b6 Update Tool client delivers hotfixes and updates seamlessly on top of the product pack. The Update Tool is available in each product release distribution and is located at <product-home>/bin directory. Read more about WSO2 latest update tool .","title":"WSO2 Update tool overview"},{"location":"install-and-setup/updates/overview/#updating-wso2-products","text":"","title":"Updating wso2 products"},{"location":"install-and-setup/updates/overview/#what-are-wso2-updates","text":"WSO2 Updates include improvements that are released by WSO2, on top of a released WSO2 product version. With updates, you do not have to wait until the next product version release to get the product enhancements and security fixes.","title":"What are WSO2 Updates?"},{"location":"install-and-setup/updates/overview/#how-to-get-wso2-updates","text":"A subscription is mandatory to get WSO2 updates. A Subscription can be obtained by following manner: Trial Subscription: Provides all the functionality of a subscription for 90 days. Paid Subscription: After discussing your specific requirements with one of our WSO2 Accounts manager a paid subscription can be obtained. Through the aforementioned Subscription the subscriber will receive all updates including bug fixes, security fixes, and improvements and 24x7 expert incident support . Read more about WSO2 subscriptions","title":"How to get WSO2 updates?"},{"location":"install-and-setup/updates/overview/#when-to-use-updates","text":"It is imperative to update your products frequently. It will ensure your environment has the latest improvements and the bug fixes. In case you are faced with an issue in your environment, but if this has been fixed in an update already,and if you have missed a recent update, it could be possible that this issues is already fixed in a most recent update. Whenever WSO2 releases a security update, we inform our customers at our earliest. WSO2 always recommend to applying security updates sooner whenever we release a security update. This will ensure your production environment is secure.","title":"When to use Updates?"},{"location":"install-and-setup/updates/overview/#how-to-update-your-wso2-products","text":"Update Tool client delivers hotfixes and updates seamlessly on top of the product pack. The Update Tool is available in each product release distribution and is located at <product-home>/bin directory. Read more about WSO2 latest update tool .","title":"How to update your WSO2 products?"},{"location":"install-and-setup/updates/update-accelerators/","text":"How to update OH accelerator? \u00b6 Usually OH accelerators are the implementation which accelerate and facilitate the FHIR related features, these accelerators will be applied on top of the wso2 base products like APIM and MI inorder to cater the healthcare domain problems. Inorder to get updates for OH accelerators we need to get the update for two separate products as below, - Download the GA/ Vanila pack of the wso2 base products like APIM or MI. - Update the base products to the latest/ desire update level. - Download the GA/ Vanila pack of the wso2 OH accelerator. - Update the wso2 OH accelerator to the latest/ desire update level. - Then apply the accelerator on top of the base product. Please read more about installation of accelerator . Continuous update \u00b6 Receiving continuous updates to your environment can be done with ease using WSO2 recommended configuration management tools, which are Puppet and Ansible. We highly recommend that to set up an automation tool like Puppet or Ansible, and automate the update process which mention above . Using this automation you can easily install and test new updates on lower environments, and can propagate to the higher environments like Production.","title":"How to update OH accelerator"},{"location":"install-and-setup/updates/update-accelerators/#how-to-update-oh-accelerator","text":"Usually OH accelerators are the implementation which accelerate and facilitate the FHIR related features, these accelerators will be applied on top of the wso2 base products like APIM and MI inorder to cater the healthcare domain problems. Inorder to get updates for OH accelerators we need to get the update for two separate products as below, - Download the GA/ Vanila pack of the wso2 base products like APIM or MI. - Update the base products to the latest/ desire update level. - Download the GA/ Vanila pack of the wso2 OH accelerator. - Update the wso2 OH accelerator to the latest/ desire update level. - Then apply the accelerator on top of the base product. Please read more about installation of accelerator .","title":"How to update OH accelerator?"},{"location":"install-and-setup/updates/update-accelerators/#continuous-update","text":"Receiving continuous updates to your environment can be done with ease using WSO2 recommended configuration management tools, which are Puppet and Ansible. We highly recommend that to set up an automation tool like Puppet or Ansible, and automate the update process which mention above . Using this automation you can easily install and test new updates on lower environments, and can propagate to the higher environments like Production.","title":"Continuous update"},{"location":"install-and-setup/updates/update-tool/","text":"What is the Update Tool? \u00b6 Update tool is a CLI distribution that is separate for Linux, macOS and Windows distributions. Bringing your product up to date with the Update Tool is very easy. It is as simple as running one of the commands that matches with your Operating System. Update Commands for OS \u00b6 On Linux: ./wso2update_linux On Mac: ./wso2update_darwin On Windows: ./wso2update_windows.exe There are myriad of features of the WSO2 Updates Tool. Following describe the features briefly: - Update tool updates the customized product distribution while merging the configurations and customized artifacts. - Update tool has the capability to update itself automatically. If the update tool has been self updated, command returns with exit code 2 - Update tool takes backups of the current pack before performing updates. These backups are used when reverting the pack to the previous state. Watch our Webinar on Updates 2.0 to witness how you could receive updates with WSO2 Updates 2.0 Read more about WSO2 latest update tool","title":"How to use WSO2 Update tool"},{"location":"install-and-setup/updates/update-tool/#what-is-the-update-tool","text":"Update tool is a CLI distribution that is separate for Linux, macOS and Windows distributions. Bringing your product up to date with the Update Tool is very easy. It is as simple as running one of the commands that matches with your Operating System.","title":"What is the Update Tool?"},{"location":"install-and-setup/updates/update-tool/#update-commands-for-os","text":"On Linux: ./wso2update_linux On Mac: ./wso2update_darwin On Windows: ./wso2update_windows.exe There are myriad of features of the WSO2 Updates Tool. Following describe the features briefly: - Update tool updates the customized product distribution while merging the configurations and customized artifacts. - Update tool has the capability to update itself automatically. If the update tool has been self updated, command returns with exit code 2 - Update tool takes backups of the current pack before performing updates. These backups are used when reverting the pack to the previous state. Watch our Webinar on Updates 2.0 to witness how you could receive updates with WSO2 Updates 2.0 Read more about WSO2 latest update tool","title":"Update Commands for OS"},{"location":"old-content/apidefs/","text":"API definitions","title":"Apidefs"},{"location":"old-content/connector/","text":"EHR/EMR Connector Support \u00b6 WSO2\u2019s solution offers out of the box connectors for EPIC, Cerner, Athena Health EMRs and is capable of generating connectors automatically to any FHIR based or Open API specification based EHR/EMR system. These connectors will increase the developer productivity but are not a must for WSO2 to integrate with an EHR/EMR. Any EHR/EMR system that\u2019s compliant with the FHIR specifications will expose a FHIR Capability Statement which provides information like the supported FHIR resources and operations of the EMR, FHIR version, authorization endpoints, etc.. The WSO2 Open Healthcare\u2019s connector generator tool accepts this capability statement and generates the connector for the corresponding EMR. The generated connectors support the following interactions. * Create * Update * Delete * Read * Search Search Interaction \u00b6 There will be seperate search operations for each of the FHIR resources supported by the EHR/EMR system. The search parameters supported by each resources will also be populated automatically. According to the FHIR specification it is possible to do a search based on ranges for the parameters of types date, quantity and number. The connectors will be generated in such a way that it will be possible to select either search by range or value. It is also possible to configure if the generated connector should not have an option to select from either range or value at all and use only the value. There will be a field to pass any additional parameters to the search operations. This is useful if there is a need to pass any modifiers (:exact, :contains, etc) or prefixes. Authentication \u00b6 When generating a connector, it is possible to configure what kind of authentication mechanism the target EHR/EMR system supports. Currently, the support is available for Oathu2, SMART backend authentication and basic authentication.","title":"EHR/EMR Connector Support"},{"location":"old-content/connector/#ehremr-connector-support","text":"WSO2\u2019s solution offers out of the box connectors for EPIC, Cerner, Athena Health EMRs and is capable of generating connectors automatically to any FHIR based or Open API specification based EHR/EMR system. These connectors will increase the developer productivity but are not a must for WSO2 to integrate with an EHR/EMR. Any EHR/EMR system that\u2019s compliant with the FHIR specifications will expose a FHIR Capability Statement which provides information like the supported FHIR resources and operations of the EMR, FHIR version, authorization endpoints, etc.. The WSO2 Open Healthcare\u2019s connector generator tool accepts this capability statement and generates the connector for the corresponding EMR. The generated connectors support the following interactions. * Create * Update * Delete * Read * Search","title":"EHR/EMR Connector Support"},{"location":"old-content/connector/#search-interaction","text":"There will be seperate search operations for each of the FHIR resources supported by the EHR/EMR system. The search parameters supported by each resources will also be populated automatically. According to the FHIR specification it is possible to do a search based on ranges for the parameters of types date, quantity and number. The connectors will be generated in such a way that it will be possible to select either search by range or value. It is also possible to configure if the generated connector should not have an option to select from either range or value at all and use only the value. There will be a field to pass any additional parameters to the search operations. This is useful if there is a need to pass any modifiers (:exact, :contains, etc) or prefixes.","title":"Search Interaction"},{"location":"old-content/connector/#authentication","text":"When generating a connector, it is possible to configure what kind of authentication mechanism the target EHR/EMR system supports. Currently, the support is available for Oathu2, SMART backend authentication and basic authentication.","title":"Authentication"},{"location":"old-content/fhir-connectors/","text":"FHIR base, bundle and operation outcome connectors.","title":"Fhir connectors"},{"location":"old-content/configs/email-notifications/","text":"Configurations for Enabling Email Notifications \u00b6 This page documents the configurations that should be added in order to enable email notifications to the file deployment.toml under /repository/conf. Email notifications can be enabled for the following events. * User registration request. * User approval/rejection. * Application creation request. * Application approval/rejection. Organization Details \u00b6 This is a required configuration. [healthcare.organization] org_name = \"testOrg\" contact_email = \"support@testorg.com\" timezone = \"GMT\" Upon User Registration \u00b6 [[healthcare.notification.mail]] name = \"new_user_signup_requested_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New User Signup - ${first_name} ${last_name}\" email_body = \"<html><body>A new user has signed up at ${time} [${timezone}] on ${date}. Visit the <a href=\\\"${server_url}/admin/tasks/user-creation/\\\">admin portal</a> to approve/reject.</body></html>\" ::: tip Note The values given within '${}' are the default placeholders that will be populated internally. ::: Upon User Approval/Rejection - To Specified Roles and Receipients \u00b6 [[healthcare.notification.mail]] name = \"new_user_signup_completed_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New User Signup - ${first_name} ${last_name}\" email_body = \"<html><body>Signup request has been ${status} by ${approver}.</body></html>\" Upon User Approval/Rejection - To the User \u00b6 [[healthcare.notification.mail]] name = \"new_user_signup_completed_external\" enable = true email_subject = \"[${org_name} Developer Portal] Your Signup Request Status\" email_body = \"<html><body>Your signup request has been ${status}. Please email ${contact_email} if you have any questions.<br/>Thank you for your interest.<br/></body></html>\" Upon Application Creation \u00b6 [[healthcare.notification.mail]] name = \"new_app_creation_requested_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New Application ${app_name} Created by ${user_name}\" email_body = \"<html><body>A new application has been created. Visit the <a href=\\\"${server_url}/admin/tasks/application-creation/\\\">admin portal</a> to approve/reject.</body></html>\" Upon Application Approval/Rejection - To Specified Roles and Receipients \u00b6 [[healthcare.notification.mail]] name = \"new_app_creation_completed_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New Application ${app_name} Created by ${user_name}\" email_body = \"<html><body>Application creation request has been ${status} by ${approver}.</body></html>\" Upon Application Approval/Rejection - To the User \u00b6 #[[healthcare.notification.mail]] #name = \"new_app_creation_completed_external\" #enable = true #email_subject = \"[${org_name} Developer Portal] Your Application Creation Request Status\" #email_body = \"<html><body>Your request to create the application ${app_name} has been ${status}. Please email ${contact_email} if you have any questions.<br/>Thank you for your interest.<br/></body></html>\"","title":"Configurations for Enabling Email Notifications"},{"location":"old-content/configs/email-notifications/#configurations-for-enabling-email-notifications","text":"This page documents the configurations that should be added in order to enable email notifications to the file deployment.toml under /repository/conf. Email notifications can be enabled for the following events. * User registration request. * User approval/rejection. * Application creation request. * Application approval/rejection.","title":"Configurations for Enabling Email Notifications"},{"location":"old-content/configs/email-notifications/#organization-details","text":"This is a required configuration. [healthcare.organization] org_name = \"testOrg\" contact_email = \"support@testorg.com\" timezone = \"GMT\"","title":"Organization Details"},{"location":"old-content/configs/email-notifications/#upon-user-registration","text":"[[healthcare.notification.mail]] name = \"new_user_signup_requested_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New User Signup - ${first_name} ${last_name}\" email_body = \"<html><body>A new user has signed up at ${time} [${timezone}] on ${date}. Visit the <a href=\\\"${server_url}/admin/tasks/user-creation/\\\">admin portal</a> to approve/reject.</body></html>\" ::: tip Note The values given within '${}' are the default placeholders that will be populated internally. :::","title":"Upon User Registration"},{"location":"old-content/configs/email-notifications/#upon-user-approvalrejection-to-specified-roles-and-receipients","text":"[[healthcare.notification.mail]] name = \"new_user_signup_completed_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New User Signup - ${first_name} ${last_name}\" email_body = \"<html><body>Signup request has been ${status} by ${approver}.</body></html>\"","title":"Upon User Approval/Rejection - To Specified Roles and Receipients"},{"location":"old-content/configs/email-notifications/#upon-user-approvalrejection-to-the-user","text":"[[healthcare.notification.mail]] name = \"new_user_signup_completed_external\" enable = true email_subject = \"[${org_name} Developer Portal] Your Signup Request Status\" email_body = \"<html><body>Your signup request has been ${status}. Please email ${contact_email} if you have any questions.<br/>Thank you for your interest.<br/></body></html>\"","title":"Upon User Approval/Rejection - To the User"},{"location":"old-content/configs/email-notifications/#upon-application-creation","text":"[[healthcare.notification.mail]] name = \"new_app_creation_requested_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New Application ${app_name} Created by ${user_name}\" email_body = \"<html><body>A new application has been created. Visit the <a href=\\\"${server_url}/admin/tasks/application-creation/\\\">admin portal</a> to approve/reject.</body></html>\"","title":"Upon Application Creation"},{"location":"old-content/configs/email-notifications/#upon-application-approvalrejection-to-specified-roles-and-receipients","text":"[[healthcare.notification.mail]] name = \"new_app_creation_completed_internal\" enable = true recipient_roles = \"approver,approver2\" recipients = \"user1@test.com,user2@test.com\" email_subject = \"[Developer Portal] New Application ${app_name} Created by ${user_name}\" email_body = \"<html><body>Application creation request has been ${status} by ${approver}.</body></html>\"","title":"Upon Application Approval/Rejection - To Specified Roles and Receipients"},{"location":"old-content/configs/email-notifications/#upon-application-approvalrejection-to-the-user","text":"#[[healthcare.notification.mail]] #name = \"new_app_creation_completed_external\" #enable = true #email_subject = \"[${org_name} Developer Portal] Your Application Creation Request Status\" #email_body = \"<html><body>Your request to create the application ${app_name} has been ${status}. Please email ${contact_email} if you have any questions.<br/>Thank you for your interest.<br/></body></html>\"","title":"Upon Application Approval/Rejection - To the User"},{"location":"old-content/consent-mgt/admin/","text":"Content administration","title":"Admin"},{"location":"old-content/consent-mgt/collection/","text":"Consent collection.","title":"Collection"},{"location":"old-content/consent-mgt/enforcement/","text":"Consent enforcement.","title":"Enforcement"},{"location":"old-content/consent-mgt/intro/","text":"Introduction to consent management","title":"Intro"},{"location":"old-content/consent-mgt/req/","text":"Consent Requisition.","title":"Req"},{"location":"old-content/fhir-capability-statement/overview/","text":"Overview \u00b6 WSO2 Open Healthcare offers you a RESTful FHIR server which is capable of managing FHIR APIs and Integrating with different other source data systems to populate or transform legacy formats into FHIR resources. As per the specification, a RESTful FHIR server allows the clients to interact in 3 levels. Instance level, Resource level and System level interactions are defined to support the implementation. Instance and Resource level interactions are tightly coupled on the use case that the particular deployment is going to address. But the System level interactions are common for most cases as those are applied to the entire development environment. Among the 4 main System interactions, Capabilities interaction needs to be supported in all the FHIR servers. Therefore, WSO2 Open Healthcare solution ships with readily available Capabilities interaction support.","title":"Overview"},{"location":"old-content/fhir-capability-statement/overview/#overview","text":"WSO2 Open Healthcare offers you a RESTful FHIR server which is capable of managing FHIR APIs and Integrating with different other source data systems to populate or transform legacy formats into FHIR resources. As per the specification, a RESTful FHIR server allows the clients to interact in 3 levels. Instance level, Resource level and System level interactions are defined to support the implementation. Instance and Resource level interactions are tightly coupled on the use case that the particular deployment is going to address. But the System level interactions are common for most cases as those are applied to the entire development environment. Among the 4 main System interactions, Capabilities interaction needs to be supported in all the FHIR servers. Therefore, WSO2 Open Healthcare solution ships with readily available Capabilities interaction support.","title":"Overview"},{"location":"old-content/fhir-capability-statement/required-features/","text":"Required Features \u00b6 WSO2 OH 3.0.0 accelerators are designed by adhering to the FHIR R4, aka version 4.0.1. According to the specification, the following attributes are mandatory to include in a FHIR server\u2019s Capability Statement. Table Apart from these required attributes, WSO2 OH provides other metadata as well. Even though the FHIR specification does not mark those as must support properties, some properties are commonly used in a general use case. Supported properties are as follows. Url - canonical url of the Capability statement. FHIR APIs\u2019 metadata \u00b6 FHIR server capability statement includes the necessary metadata about the available FHIR resources(FHIR APIs) in the server and client applications or any other dependent services can query the capabilities interaction before starting communication with the server. FHIR spec allows the servers to include a large range of important information to be available for each FHIR resource. Among them, the following information has been included in the Capability Statement of WSO2 Open Healthcare solution. Resource type, supported FHIR profiles Interaction - Http interactions configured for the FHIR API. Available values: create, read, vread, update, patch,... Search parameters supported - for the search interaction, these parameters can be used as query parameters. All these attributes are dynamically populated and updated according to the changes done through the WSO2 OH Portals.","title":"Required Features"},{"location":"old-content/fhir-capability-statement/required-features/#required-features","text":"WSO2 OH 3.0.0 accelerators are designed by adhering to the FHIR R4, aka version 4.0.1. According to the specification, the following attributes are mandatory to include in a FHIR server\u2019s Capability Statement. Table Apart from these required attributes, WSO2 OH provides other metadata as well. Even though the FHIR specification does not mark those as must support properties, some properties are commonly used in a general use case. Supported properties are as follows. Url - canonical url of the Capability statement.","title":"Required Features"},{"location":"old-content/fhir-capability-statement/required-features/#fhir-apis-metadata","text":"FHIR server capability statement includes the necessary metadata about the available FHIR resources(FHIR APIs) in the server and client applications or any other dependent services can query the capabilities interaction before starting communication with the server. FHIR spec allows the servers to include a large range of important information to be available for each FHIR resource. Among them, the following information has been included in the Capability Statement of WSO2 Open Healthcare solution. Resource type, supported FHIR profiles Interaction - Http interactions configured for the FHIR API. Available values: create, read, vread, update, patch,... Search parameters supported - for the search interaction, these parameters can be used as query parameters. All these attributes are dynamically populated and updated according to the changes done through the WSO2 OH Portals.","title":"FHIR APIs\u2019 metadata"},{"location":"old-content/fhir-mappers/hl7-to-fhir-example/","text":"Example \u00b6 Coverting HL7 message to FHIR \u00b6 This example will guide you to convert an HL7 message to FHIR using WSO2 V2-To-FHIR datamapper. Prerequisites \u00b6 You need to first download the WSO2 Integration Studio to develop FHIR Integrations. Add the V2-To-FHIR datamapper by importing into Integration studio. In order to recieve a HL7 message to the integration layer you have to configure HL7 transport and implement a HL7 listener proxy in the integration flow. Configuring the datamapper \u00b6 After adding the datamapper you will be able to see it in the palette. CreateResources operation is used to construct the required resources from a HL7 V2 message available within the message flow. You can drag and drop the CreateResources operation to the canvas in the Integration Studio and configure. In the following example we have added Patient and Encounter resources to be created from the hl7 v2 message. For example, If the HL7 V2 message has PID segments and PV segments it will create Patient and encounter resources accordingly with the prebuild mappings and output the result as a bundle to the message context. You can provide the resources need to be created from the HL7 message by giving resource names in comma seperated manner.","title":"Example"},{"location":"old-content/fhir-mappers/hl7-to-fhir-example/#example","text":"","title":"Example"},{"location":"old-content/fhir-mappers/hl7-to-fhir-example/#coverting-hl7-message-to-fhir","text":"This example will guide you to convert an HL7 message to FHIR using WSO2 V2-To-FHIR datamapper.","title":"Coverting HL7 message to FHIR"},{"location":"old-content/fhir-mappers/hl7-to-fhir-example/#prerequisites","text":"You need to first download the WSO2 Integration Studio to develop FHIR Integrations. Add the V2-To-FHIR datamapper by importing into Integration studio. In order to recieve a HL7 message to the integration layer you have to configure HL7 transport and implement a HL7 listener proxy in the integration flow.","title":"Prerequisites"},{"location":"old-content/fhir-mappers/hl7-to-fhir-example/#configuring-the-datamapper","text":"After adding the datamapper you will be able to see it in the palette. CreateResources operation is used to construct the required resources from a HL7 V2 message available within the message flow. You can drag and drop the CreateResources operation to the canvas in the Integration Studio and configure. In the following example we have added Patient and Encounter resources to be created from the hl7 v2 message. For example, If the HL7 V2 message has PID segments and PV segments it will create Patient and encounter resources accordingly with the prebuild mappings and output the result as a bundle to the message context. You can provide the resources need to be created from the HL7 message by giving resource names in comma seperated manner.","title":"Configuring the datamapper"},{"location":"old-content/fhir-mappers/hl7-to-fhir-overview/","text":"Overview \u00b6 HL7 V2 is a widely adopted messaging standard used before FHIR to support clinical data exchange between systems. WSO2 Open Healthcare Server is capable of receiving and sending HL7 messages. WSO2 Open Healthcare solution provides a dedicated datamapper called V2-To-FHIR datamapper. V2-To-FHIR datamapper provides capability to convert HL7 v2 messages into FHIR resources. The mappings between the hl7 v2 message elements are referred from the V2-To-FHIR implementation guide published by HL7. Therefore this datamapper constructs a FHIR bundle with the resources created from the prebuilt mappings for segments and data types as per the specification.","title":"Overview"},{"location":"old-content/fhir-mappers/hl7-to-fhir-overview/#overview","text":"HL7 V2 is a widely adopted messaging standard used before FHIR to support clinical data exchange between systems. WSO2 Open Healthcare Server is capable of receiving and sending HL7 messages. WSO2 Open Healthcare solution provides a dedicated datamapper called V2-To-FHIR datamapper. V2-To-FHIR datamapper provides capability to convert HL7 v2 messages into FHIR resources. The mappings between the hl7 v2 message elements are referred from the V2-To-FHIR implementation guide published by HL7. Therefore this datamapper constructs a FHIR bundle with the resources created from the prebuilt mappings for segments and data types as per the specification.","title":"Overview"},{"location":"old-content/fhir-mappers/hl7-to-fhir-reference/","text":"References \u00b6","title":"References"},{"location":"old-content/fhir-mappers/hl7-to-fhir-reference/#references","text":"","title":"References"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/","text":"Example \u00b6 Coverting XML payload to C4BB Patient Example \u00b6 This example will guide you to convert an XML Payload to CRBB-Patient profile. What you will build \u00b6 Data Service to create the XML Payload. <patientCollection xmlns=\"http://ws.wso2.org/dataservice\"> <patient> <id>285137</id> <ethnicity__pc>Unknown</ethnicity__pc> <suffix xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <gender__pc>Female</gender__pc> <lastname>OVERKAMP</lastname> <personbirthdate>1987-11-03+05:30</personbirthdate> <firstname>JUSTIN</firstname> <middlename xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <phone>(062) 8377233</phone> <marital_status__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <language_other xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <language__c>English</language__c> <billingcountrycode>US</billingcountrycode> <personmailingpostalcode>344532</personmailingpostalcode> <personmailingstate>NY</personmailingstate> <personmailingcity>New York</personmailingcity> <personmailingstreet>1150 476 Co Rd</personmailingstreet> <date_of_death__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <primary_insurance_number__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <ethnicity_race_other__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <lastmodifieddate>2020-01-23+05:30</lastmodifieddate> </patient> </patientCollection> FHIR Mappings to map the elements of the existing payload to the CRBB-Patient profile. CRBB Patient Payload. { \"resourceType\": \"Bundle\", \"meta\": { \"lastUpdated\": \"2022-05-24T23:42:32.221+00:00\" }, \"type\": \"searchset\", \"total\": 1, \"entry\": [ { \"resource\": { \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"extension\": [ { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\", \"extension\": [ { \"url\": \"text\", \"valueString\": \"Unknown\" } ] }, { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\", \"valueString\": \"F\" } ], \"identifier\": [ { \"type\": { \"coding\": [ { \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"MB\", \"display\": \"Member Number\" } ] }, \"value\": \"285137\" } ], \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ], \"telecom\": [ { \"system\": \"phone\", \"value\": \"(062) 8377233\" } ], \"gender\": \"female\", \"birthDate\": \"1987-11-03\", \"address\": [ { \"type\": \"physical\", \"line\": [ \"1150 476 Co Rd\" ], \"city\": \"New York\", \"state\": \"NY\", \"postalCode\": \"344532\", \"country\": \"US\" } ], \"communication\": [ { \"language\": { \"coding\": [ { \"system\": \"urn:ietf:bcp:47\", \"code\": \"en\" } ] } } ] } } ] } Setting up the environment \u00b6 Setting up mySQL Database \u00b6 Install the MySQL server. Create the following database: Patients CREATE DATABASE Patients; Create the following table: use Patients; CREATE TABLE `patient` ( `id` int(11) NOT NULL, `ethnicity__pc` varchar(45) DEFAULT NULL, `suffix` varchar(45) DEFAULT NULL, `gender__pc` varchar(45) DEFAULT NULL, `lastname` varchar(45) DEFAULT NULL, `personbirthdate` date DEFAULT NULL, `firstname` varchar(45) DEFAULT NULL, `middlename` varchar(45) DEFAULT NULL, `phone` varchar(45) DEFAULT NULL, `marital_status__pc` varchar(45) DEFAULT NULL, `language_other` varchar(45) DEFAULT NULL, `language__c` varchar(45) DEFAULT NULL, `billingcountrycode` varchar(45) DEFAULT NULL, `personmailingpostalcode` varchar(45) DEFAULT NULL, `personmailingstate` varchar(45) DEFAULT NULL, `personmailingcity` varchar(45) DEFAULT NULL, `personmailingstreet` varchar(45) DEFAULT NULL, `date_of_death__pc` date DEFAULT NULL, `primary_insurance_number__pc` varchar(45) DEFAULT NULL, `ethnicity_race_other__pc` varchar(45) DEFAULT NULL, `lastmodifieddate` date DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1; Enter the following data into the table: insert into patient (id,ethnicity__pc,gender__pc,lastname,personbirthdate,firstname,phone,language__c,billingcountrycode,personmailingpostalcode,personmailingstate,personmailingcity,personmailingstreet,lastmodifieddate) values(285137,'Unknown','Female','OVERKAMP','1987-11-03','JUSTIN','(062) 8377233', 'English','US','344532','NY','New York','1150 476 Co Rd','2020-01-23'); Creating the Data Service \u00b6 The Data Service is created to use as the backend source. You can use any backend or EHR System. Create a Data Service using WSO2 Enterprise Integrator . Please refer Generating a Data Service You can use the following DataService xml file for the reference when creating the queries. DataService.xml Invoke the Dataservice with the following URL, and you should be able to see a response in the step 1. Now the backend source is ready to be used. curl --location --request GET 'http://localhost:8280/services/patient_DataService.SOAP12Endpoint/patient/285137' Import Projects \u00b6 The user will be provided two project zip files, which are projectsGenerationTool_sampleclient_api.zip file and projectsGenerationTool_sampleclient_integration.zip file. These need to be imported to WSO2 Integration Studio Unzip the two projects. Please follow the steps to import the projects to the Integration Studio. Import-Projects Step 1: Implementing business logic \u00b6 No mandatory changes will be done to The sampleclient_api project. Open the source integration project, and the following changes need to be done. Before connect to the backend source and fetch data, the business logic needs to be implemented in _ _seq.xml in the source integration project. In this example, it is sampleclient_C4BB_C4BBPatient_search_seq.xml Developers can implement any business logic using the standard WSO2 integration components(mediators, connectors etc.) by dragging and dropping to the canvas from the integration studio tool palette just before the source connect logic is triggered from the call template mediator. Step 2:Implement source system connection logic for the relevant FHIR API \u00b6 This can be found under the templates section of the synapse-configs of the source integration project which ends with sourceConnect_template suffix. In this example, it is sampleclient_C4BB_C4BBPatient_search_sourceConnect_template.xml In this step we can provide the Data Service endpoint using a call mediator. The source will be as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_C4BB_C4BBPatient_search_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <parameter defaultValue=\"\" isMandatory=\"false\" name=\"id\"/> <sequence> <call> <endpoint> <http method=\"get\" uri-template=\"http://localhost:8280/services/patient_DataService.SOAP12Endpoint/patient/285137\"> <suspendOnFailure> <initialDuration>-1</initialDuration> <progressionFactor>-1</progressionFactor> <maximumDuration>0</maximumDuration> </suspendOnFailure> <markForSuspension> <retriesBeforeSuspension>0</retriesBeforeSuspension> </markForSuspension> </http> </endpoint> </call> </sequence> </template> Step 3: Implement the FHIR Mappings \u00b6 After having the source payload from backend sources, then you can implement the FHIR mappings. Go to the Source integration project and open the registry resources project. There are three types of templates which are in yaml format. - Resource Mapping templates - Key Value Mapping template file (keymappings.yaml) - Conditions mapping template file (conditions.yaml) Resource templates Developer only needs to fill the relevant source value from the source payload using relevant Xpath or a JsonPath. In this example c4bb-patient.yaml file. We need to provide the following Xpaths according to the example. 1. Path to source payload root element - read: //patientCollection/patient 2. Relative path to source payload child data elements - source -> read: -> //id Key Value template The Key Value Mapping template file is used to resolve the source system values with the FHIR specific values for resource fields. For example in the FHIR Patient resource, the gender field should only have standard values defined by the FHIR specification which are \u2018male\u2019 for Male, \u2018female\u2019 for Female. In source systems, these kinds of data may have a different representation. In such cases we can use the Key Value Mapping template to map the source system representation to the standard FHIR representation. Step 4: Export Composite application and deploy in the Micro Integrator. \u00b6 After completing the above steps, you can export the deployable composite applications for the two projects. Following artifacts need to be deployed in the WSO2 openhealthcare integration server in order to make FHIR mapper templates to work. FHIR Integration API carbon app -> repository/deployment/server/carbonapps FHIR Source Integration carbon ap -> repository/deployment/server/carbonapps Exporting Integration Logic as a CApp Testing \u00b6 Apply wso2oh-mi-accelerator-3.0.0 in wso2 micro integrator. (A doc should be written in base-scenarios) We can use Curl or Postman to try the API. The testing steps are provided for curl. Steps for Postman should be straightforward and can be derived from the curl requests. Invoke the endpoint and you will be able to see the response in the step3.","title":"Example"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#example","text":"","title":"Example"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#coverting-xml-payload-to-c4bb-patient-example","text":"This example will guide you to convert an XML Payload to CRBB-Patient profile.","title":"Coverting XML payload to C4BB Patient Example"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#what-you-will-build","text":"Data Service to create the XML Payload. <patientCollection xmlns=\"http://ws.wso2.org/dataservice\"> <patient> <id>285137</id> <ethnicity__pc>Unknown</ethnicity__pc> <suffix xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <gender__pc>Female</gender__pc> <lastname>OVERKAMP</lastname> <personbirthdate>1987-11-03+05:30</personbirthdate> <firstname>JUSTIN</firstname> <middlename xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <phone>(062) 8377233</phone> <marital_status__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <language_other xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <language__c>English</language__c> <billingcountrycode>US</billingcountrycode> <personmailingpostalcode>344532</personmailingpostalcode> <personmailingstate>NY</personmailingstate> <personmailingcity>New York</personmailingcity> <personmailingstreet>1150 476 Co Rd</personmailingstreet> <date_of_death__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <primary_insurance_number__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <ethnicity_race_other__pc xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/> <lastmodifieddate>2020-01-23+05:30</lastmodifieddate> </patient> </patientCollection> FHIR Mappings to map the elements of the existing payload to the CRBB-Patient profile. CRBB Patient Payload. { \"resourceType\": \"Bundle\", \"meta\": { \"lastUpdated\": \"2022-05-24T23:42:32.221+00:00\" }, \"type\": \"searchset\", \"total\": 1, \"entry\": [ { \"resource\": { \"resourceType\": \"Patient\", \"id\": \"285137\", \"meta\": { \"profile\": [ \"http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient\" ] }, \"extension\": [ { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\", \"extension\": [ { \"url\": \"text\", \"valueString\": \"Unknown\" } ] }, { \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\", \"valueString\": \"F\" } ], \"identifier\": [ { \"type\": { \"coding\": [ { \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"MB\", \"display\": \"Member Number\" } ] }, \"value\": \"285137\" } ], \"name\": [ { \"family\": \"OVERKAMP\", \"given\": [ \"JUSTIN\" ] } ], \"telecom\": [ { \"system\": \"phone\", \"value\": \"(062) 8377233\" } ], \"gender\": \"female\", \"birthDate\": \"1987-11-03\", \"address\": [ { \"type\": \"physical\", \"line\": [ \"1150 476 Co Rd\" ], \"city\": \"New York\", \"state\": \"NY\", \"postalCode\": \"344532\", \"country\": \"US\" } ], \"communication\": [ { \"language\": { \"coding\": [ { \"system\": \"urn:ietf:bcp:47\", \"code\": \"en\" } ] } } ] } } ] }","title":"What you will build"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#setting-up-the-environment","text":"","title":"Setting up the environment"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#setting-up-mysql-database","text":"Install the MySQL server. Create the following database: Patients CREATE DATABASE Patients; Create the following table: use Patients; CREATE TABLE `patient` ( `id` int(11) NOT NULL, `ethnicity__pc` varchar(45) DEFAULT NULL, `suffix` varchar(45) DEFAULT NULL, `gender__pc` varchar(45) DEFAULT NULL, `lastname` varchar(45) DEFAULT NULL, `personbirthdate` date DEFAULT NULL, `firstname` varchar(45) DEFAULT NULL, `middlename` varchar(45) DEFAULT NULL, `phone` varchar(45) DEFAULT NULL, `marital_status__pc` varchar(45) DEFAULT NULL, `language_other` varchar(45) DEFAULT NULL, `language__c` varchar(45) DEFAULT NULL, `billingcountrycode` varchar(45) DEFAULT NULL, `personmailingpostalcode` varchar(45) DEFAULT NULL, `personmailingstate` varchar(45) DEFAULT NULL, `personmailingcity` varchar(45) DEFAULT NULL, `personmailingstreet` varchar(45) DEFAULT NULL, `date_of_death__pc` date DEFAULT NULL, `primary_insurance_number__pc` varchar(45) DEFAULT NULL, `ethnicity_race_other__pc` varchar(45) DEFAULT NULL, `lastmodifieddate` date DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1; Enter the following data into the table: insert into patient (id,ethnicity__pc,gender__pc,lastname,personbirthdate,firstname,phone,language__c,billingcountrycode,personmailingpostalcode,personmailingstate,personmailingcity,personmailingstreet,lastmodifieddate) values(285137,'Unknown','Female','OVERKAMP','1987-11-03','JUSTIN','(062) 8377233', 'English','US','344532','NY','New York','1150 476 Co Rd','2020-01-23');","title":"Setting up mySQL Database"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#creating-the-data-service","text":"The Data Service is created to use as the backend source. You can use any backend or EHR System. Create a Data Service using WSO2 Enterprise Integrator . Please refer Generating a Data Service You can use the following DataService xml file for the reference when creating the queries. DataService.xml Invoke the Dataservice with the following URL, and you should be able to see a response in the step 1. Now the backend source is ready to be used. curl --location --request GET 'http://localhost:8280/services/patient_DataService.SOAP12Endpoint/patient/285137'","title":"Creating the Data Service"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#import-projects","text":"The user will be provided two project zip files, which are projectsGenerationTool_sampleclient_api.zip file and projectsGenerationTool_sampleclient_integration.zip file. These need to be imported to WSO2 Integration Studio Unzip the two projects. Please follow the steps to import the projects to the Integration Studio. Import-Projects","title":"Import Projects"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#step-1-implementing-business-logic","text":"No mandatory changes will be done to The sampleclient_api project. Open the source integration project, and the following changes need to be done. Before connect to the backend source and fetch data, the business logic needs to be implemented in _ _seq.xml in the source integration project. In this example, it is sampleclient_C4BB_C4BBPatient_search_seq.xml Developers can implement any business logic using the standard WSO2 integration components(mediators, connectors etc.) by dragging and dropping to the canvas from the integration studio tool palette just before the source connect logic is triggered from the call template mediator.","title":"Step 1: Implementing business logic"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#step-2implement-source-system-connection-logic-for-the-relevant-fhir-api","text":"This can be found under the templates section of the synapse-configs of the source integration project which ends with sourceConnect_template suffix. In this example, it is sampleclient_C4BB_C4BBPatient_search_sourceConnect_template.xml In this step we can provide the Data Service endpoint using a call mediator. The source will be as below. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <template name=\"sampleclient_C4BB_C4BBPatient_search_sourceConnect_template\" xmlns=\"http://ws.apache.org/ns/synapse\"> <parameter defaultValue=\"\" isMandatory=\"false\" name=\"id\"/> <sequence> <call> <endpoint> <http method=\"get\" uri-template=\"http://localhost:8280/services/patient_DataService.SOAP12Endpoint/patient/285137\"> <suspendOnFailure> <initialDuration>-1</initialDuration> <progressionFactor>-1</progressionFactor> <maximumDuration>0</maximumDuration> </suspendOnFailure> <markForSuspension> <retriesBeforeSuspension>0</retriesBeforeSuspension> </markForSuspension> </http> </endpoint> </call> </sequence> </template>","title":"Step 2:Implement source system connection logic for the relevant FHIR API"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#step-3-implement-the-fhir-mappings","text":"After having the source payload from backend sources, then you can implement the FHIR mappings. Go to the Source integration project and open the registry resources project. There are three types of templates which are in yaml format. - Resource Mapping templates - Key Value Mapping template file (keymappings.yaml) - Conditions mapping template file (conditions.yaml) Resource templates Developer only needs to fill the relevant source value from the source payload using relevant Xpath or a JsonPath. In this example c4bb-patient.yaml file. We need to provide the following Xpaths according to the example. 1. Path to source payload root element - read: //patientCollection/patient 2. Relative path to source payload child data elements - source -> read: -> //id Key Value template The Key Value Mapping template file is used to resolve the source system values with the FHIR specific values for resource fields. For example in the FHIR Patient resource, the gender field should only have standard values defined by the FHIR specification which are \u2018male\u2019 for Male, \u2018female\u2019 for Female. In source systems, these kinds of data may have a different representation. In such cases we can use the Key Value Mapping template to map the source system representation to the standard FHIR representation.","title":"Step 3: Implement the FHIR Mappings"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#step-4-export-composite-application-and-deploy-in-the-micro-integrator","text":"After completing the above steps, you can export the deployable composite applications for the two projects. Following artifacts need to be deployed in the WSO2 openhealthcare integration server in order to make FHIR mapper templates to work. FHIR Integration API carbon app -> repository/deployment/server/carbonapps FHIR Source Integration carbon ap -> repository/deployment/server/carbonapps Exporting Integration Logic as a CApp","title":"Step 4: Export Composite application and deploy in the Micro Integrator."},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-example/#testing","text":"Apply wso2oh-mi-accelerator-3.0.0 in wso2 micro integrator. (A doc should be written in base-scenarios) We can use Curl or Postman to try the API. The testing steps are provided for curl. Steps for Postman should be straightforward and can be derived from the curl requests. Invoke the endpoint and you will be able to see the response in the step3.","title":"Testing"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-overview/","text":"Overview \u00b6 WSO2 Open Healthcare facilitates to pre generate the integration projects based on the FHIR Implementation Guides . Each implementation guide provides a set of profiles that are extended from FHIR resources and cover a certain use case. Main objective of grouping the artifacts into two projects is to offload the developer\u2019s workload and give more space to focus only on business logic related implementation. That is, in a regular FHIR implementation, the API Integration project can be built and deployed without any changes and all the source data related logic can be implemented in the Source Integration project. Contents of each project are as follows \u00b6 API Integration project API artifacts Common sequences - It holds the common operations such as creating bundles, error handling and etc. Source Integration project Profile Sequences - Per each profile, a dedicated sequence artifact is generated. Common sequences - Some sequences are being used across multiple profiles. Templates - For the places where repetitive integration logic is being executed, templates can be used. Each artifact will contain certain guidelines as comments so that the integration developer can accelerate their work while following the best practices.","title":"Overview"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-overview/#overview","text":"WSO2 Open Healthcare facilitates to pre generate the integration projects based on the FHIR Implementation Guides . Each implementation guide provides a set of profiles that are extended from FHIR resources and cover a certain use case. Main objective of grouping the artifacts into two projects is to offload the developer\u2019s workload and give more space to focus only on business logic related implementation. That is, in a regular FHIR implementation, the API Integration project can be built and deployed without any changes and all the source data related logic can be implemented in the Source Integration project.","title":"Overview"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-overview/#contents-of-each-project-are-as-follows","text":"API Integration project API artifacts Common sequences - It holds the common operations such as creating bundles, error handling and etc. Source Integration project Profile Sequences - Per each profile, a dedicated sequence artifact is generated. Common sequences - Some sequences are being used across multiple profiles. Templates - For the places where repetitive integration logic is being executed, templates can be used. Each artifact will contain certain guidelines as comments so that the integration developer can accelerate their work while following the best practices.","title":"Contents of each project are as follows"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/","text":"References \u00b6 FHIR Template Features \u00b6 Resource Templates \u00b6 Resource template structure will look like follows. It can be identified by the file structure .yaml Key value Template \u00b6 Conditions Template \u00b6 Template Functions \u00b6","title":"References"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/#references","text":"","title":"References"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/#fhir-template-features","text":"","title":"FHIR Template Features"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/#resource-templates","text":"Resource template structure will look like follows. It can be identified by the file structure .yaml","title":"Resource Templates"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/#key-value-template","text":"","title":"Key value Template"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/#conditions-template","text":"","title":"Conditions Template"},{"location":"old-content/fhir-mapping-templates/fhir-mapping-templates-reference/#template-functions","text":"","title":"Template Functions"},{"location":"old-content/smart-on-fhir/get-patient-id/","text":"How to get patient/member id.","title":"Get patient id"},{"location":"old-content/smart-on-fhir/jwt/","text":"JWT claims handling.","title":"Jwt"},{"location":"old-content/smart-on-fhir/tips/","text":"Tips on building a SMART app.","title":"Tips"},{"location":"old-content/smart-on-fhir/wkc/","text":"Well-known Config","title":"Wkc"},{"location":"use-cases/use-cases-overview/","text":"Use cases - Overview \u00b6","title":"Overview"},{"location":"use-cases/use-cases-overview/#use-cases-overview","text":"","title":"Use cases - Overview"}]}